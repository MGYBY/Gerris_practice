# Title: The square and circular cylinder impacted by the normal flow
#
# Description:
#

# below this depth the flow is considered "dry"
Define DRY 2.0e-6
Define sinTheta 0.060
Define cosTheta (pow((1.0-pow(sinTheta, 2.0)), 0.50))
Define tanTheta (sinTheta/cosTheta)
Define GRAV 9.81
Define GRAVITYCOEFF (GRAV*cosTheta)
Define nPower 0.40
Define betaVar (2.0*(1.0+2.0*nPower)/(2.0+3.0*nPower))
Define muN 0.14
Define rhoMud 1120.0

Define FROUDE 1.0
Define NORMALDEPTH 0.002099551886
Define NORMALVELOCITY 0.1433858

Define width ((NORMALDEPTH)*75.0)
Define ASPECTRATIO 3
Define NUMBOXY 3
Define NUMBOXX 9
Define NUMBOX 27
Define NUMSEG 42
Define LX (width*5.0*ASPECTRATIO)
Define LY (width*5.0)
Define boxLength (LX/NUMBOXX)
Define XB ((pow(NORMALVELOCITY,2.0)/(GRAV*sinTheta))*50)
Define REFINELENGTH ((pow(NORMALVELOCITY,2.0)/(GRAV*sinTheta))*100+width*3.00)

Define EPSILONU 5e-5

# mesh adaptivity parameters
Define MAXLEVEL 8
Define MINLEVEL 4

# Rotated Square solid
# Define CHARAWIDTH (width)
# Define LEFTCOORD (XB)
# Define CENTERCOORD (LYCENTER)
# Define RIGHTCOORD (LEFTCOORD+1.0*CHARAWIDTH)
# Define MIDCOORD (LEFTCOORD+1.0*CHARAWIDTH/2.0)
# Define KSLOPE(x1,x2,y1,y2) (y2-y1)/(x2-x1)
# Define BINTERCEPT(x1,x2,y1,y2) (x2*y1-x1*y2)/(x2-x1)
# # calculation of apex coordinates of the triangle
# Define TP1X (LEFTCOORD)
# Define TP1Y (CENTERCOORD)
# Define TP2X (MIDCOORD)
# Define TP2Y (CENTERCOORD+0.50*CHARAWIDTH)
# Define TP3X (RIGHTCOORD)
# Define TP3Y (CENTERCOORD)
# Define TP4X (MIDCOORD)
# Define TP4Y (CENTERCOORD-0.50*CHARAWIDTH)

Define TOUTPUT 0.50

NUMBOX NUMSEG GfsRiver GfsBox GfsGEdge {
    x = 0.5 y = 0.5 
} {

    # define the source terms
    Global {
        // Parameters
        static double amplitude = 0.20;
        // static double distPeriod = 1.00;
	static double distPeriod = 3.1415926*NORMALDEPTH/(sinTheta*NORMALVELOCITY);

        // x-source
        static double powerLawX(double h, double qx, double qy) {
            double vel=pow((pow(qx, 2.0)+pow(qy, 2.0)), 0.50)/h;
            return (GRAVITYCOEFF*h*(sinTheta/cosTheta)+(-1.0)*(muN/rhoMud)*(qx/h)/vel*(pow((((1.0+2.0*nPower)/nPower)*vel/h), nPower)));
        }

        // y-source
        static double powerLawY(double h, double qx, double qy) {
            double vel=pow((pow(qx, 2.0)+pow(qy, 2.0)), 0.50)/h;
            return ((-1.0)*(muN/rhoMud)*(qy/h)/vel*(pow((((1.0+2.0*nPower)/nPower)*vel/h), nPower)));
        }

        // depth (p) wave-maker
        static double depth_bc(double t) {
            if (t<distPeriod/2.0) return (NORMALDEPTH*(1.0+amplitude*sin(2.0*M_PI*t/distPeriod)));
            else return (NORMALDEPTH);
        }

        // momentum (U) wave-maker
        static double velocity_bc(double t) {
            if (t<distPeriod/2.0) return (FROUDE*pow((GRAVITYCOEFF*pow((NORMALDEPTH*(1.0+amplitude*sin(2.0*M_PI*t/distPeriod))),3.0)),0.50));
            else return (NORMALVELOCITY*NORMALDEPTH);
        }
    }

    Time { end = 12 }

    PhysicalParams { L = boxLength g = GRAVITYCOEFF betaCoeff = betaVar }

    # Solid (cube((XB+width/2.0), boxLength/2.0 ,0.0 , width))
    # Rotated Square solid
    # Solid ({
#         double k1 = KSLOPE(TP1X,TP2X,TP1Y,TP2Y);
#         double k2 = KSLOPE(TP2X,TP3X,TP2Y,TP3Y);
#         double k3 = KSLOPE(TP3X,TP4X,TP3Y,TP4Y);
#         double k4 = KSLOPE(TP4X,TP1X,TP4Y,TP1Y);
#         double b1 = BINTERCEPT(TP1X,TP2X,TP1Y,TP2Y);
#         double b2 = BINTERCEPT(TP2X,TP3X,TP2Y,TP3Y);
#         double b3 = BINTERCEPT(TP3X,TP4X,TP3Y,TP4Y);
#         double b4 = BINTERCEPT(TP4X,TP1X,TP4Y,TP1Y);
#         double line1 = - (k1*x - y + b1);
# 	    double line2 = - (k2*x - y + b2);
#         double line3 = (k3*x - y + b3);
#         double line4 = (k4*x - y + b4);
#         return intersection (intersection (intersection (line1, line2), line3), line4);
# })
    Solid (sphere((XB+width/2.0), (boxLength/2.0) ,0.0 , width/2.0))
    RefineSolid MAXLEVEL

    Init {} {
        # Initial normal flow
	    P = NORMALDEPTH
	    U = NORMALDEPTH*NORMALVELOCITY
        OBSREF = pow((x-(XB+width/2.0)),2.0)+pow((y-(LY/2.0)),2.0)<pow(width/2.0*1.50,2.0) ? 1.0 : 0.0
        BEGININIT = x<0.50 ? 1.0 : 0.0
    }

    Init { istep = 1 } {
	# # TVD RK3
    # # follow the integration procedure suggested by E.F.Toro
    # # first stage
    # UMed1 = ((P > DRY && fabs(U/P) > EPSILONU) ? U + dt * powerLawX(P, U, V) : 0.)
    # VMed1 = ((P > DRY && fabs(V/P) > EPSILONU) ? V + dt * powerLawY(P, U, V) : 0.)
# 
	# # second stage
	# UMed2 = ((P > DRY && fabs(U/P) > EPSILONU) ? (3.0/4.0)*U + (1.0/4.0)*UMed1 + (1.0/4.0)*dt*powerLawX(P, UMed1, VMed1) : 0.)
	# VMed2 = ((P > DRY && fabs(V/P) > EPSILONU) ? (3.0/4.0)*V + (1.0/4.0)*VMed1 + (1.0/4.0)*dt*powerLawY(P, UMed1, VMed1) : 0.)
# 
	# # third stage
	# U = ((P > DRY && fabs(U/P) > EPSILONU) ? (1.0/3.0)*U+(2.0/3.0)*UMed2+(2.0/3.0)*dt*powerLawX(P, UMed2, VMed2) : 0.)
    # V = ((P > DRY && fabs(V/P) > EPSILONU) ? (1.0/3.0)*V+(2.0/3.0)*VMed2+(2.0/3.0)*dt*powerLawY(P, UMed2, VMed2) : 0.)
    # P = (P > DRY ? P : 0.)
    
    # check erroneous velocity
    U = (Velocity < (40.0*NORMALVELOCITY) || dt > 1e-5 ) ? U :0.0
    V = (Velocity < (40.0*NORMALVELOCITY) || dt > 1e-5 ) ? V :0.0
    # another strategy
    # U = (P<(NORMALDEPTH*0.05) && Velocity > (12.0*NORMALVELOCITY)) ? 0.0 : U
    # V = (P<(NORMALDEPTH*0.05) && Velocity > (12.0*NORMALVELOCITY)) ? 0.0 : V
    
    # implicit method
    U = (P > DRY && fabs(Velocity) > EPSILONU) ? (U+dt*tanTheta*GRAVITYCOEFF*P)/(1.0+dt*muN/rhoMud*pow((1+2.0*nPower)/(nPower*P), nPower)*pow(Velocity, nPower-1)/P) :0.0
    V = (P > DRY && fabs(Velocity) > EPSILONU) ? V/(1.0+dt*muN/rhoMud*pow((1+2.0*nPower)/(nPower*P), nPower)*pow(Velocity, nPower-1)/P) :0.0
    P = (P > DRY ? P : 0.)
    }
    
    Init { step = TOUTPUT } {
    		# Re number calc.
		RE = rhoMud*(pow(Velocity, (2.0-nPower)))*(pow(P, nPower))/muN
    }

    AdvectionParams {
        gradient = gfs_center_sweby_gradient
	# gradient = gfs_center_vlSharp04_gradient
        cfl = 0.35
        }

    # Refine MAXLEVEL
    Refine ((x<1.0 || (pow((x-(XB+width/2.0)),2.0)+pow((y-(boxLength/2.0)),2.0)<pow(width/2.0*1.25,2.0))) ? MAXLEVEL : MINLEVEL)
    # resolve bow-shock wave more efficiently
    AdaptGradient { istep = 1} {
        cmax = 2.0e-4
        cfactor = 2
        # cfactor = 4
        maxlevel = MAXLEVEL
        minlevel = MINLEVEL
    } P
    AdaptGradient { istep = 1} {
        cmax = 0.45e-5
        cfactor = 2
        # cfactor = 4
#         weight = 10
        maxlevel = x>(XB-width) ? MAXLEVEL : (MINLEVEL+1)
        minlevel = MINLEVEL
    } P
    # or use a vorticity-based criterion
#     AdaptFunction { istep = 1 } {
# 	cmax = 5e-6
# 	cfactor= 2
# 	maxlevel = MAXLEVEL
# 	minlevel = MINLEVEL
#     } (fabs(VORT*dL/1.0))
	# use this trick to avoid complications at wavefronts
	( (x>(XB-1.25*width) ) ? fabs(VORT*dL/1.0) : 0.0)
	# where VORT is defined in init
	# VORT = (P > DRY ? (dx("V") - dy("U")) : 0.0)

    AdaptError { istart = 1 istep = 1 } { cmax = (NORMALDEPTH/225.0) maxlevel = MAXLEVEL minlevel = MINLEVEL } P

    # Use constant resolution around obstacle
    AdaptFunction { istep = 1 } {
	cmax = 0
	maxlevel = MAXLEVEL
    } OBSREF

    AdaptFunction { istep = 1 end = 4.2 } {
	cmax = 0
	maxlevel = MAXLEVEL
    } BEGININIT

    #(P < DRY ? 0. : P + Zb)

    OutputTime { istep = 10 } stderr
    OutputTime { istep = 10 } ./time-stats.txt

    OutputSimulation { step = TOUTPUT } snapshot-%g.gfs { variables = P,U,V,VORT,OBSREF,BEGININIT,RE }
    
    # OutputSolidForce { istep = 1 } f
    OutputSolidForce { istep = 1 } {
        awk 'BEGIN{
            nd = NORMALDEPTH;
            nv = NORMALVELOCITY;
            slope = sinTheta;
            gravity = GRAV;
            w = width;
	    corr = betaVar;
        }
        {
           if ($1 != "#")
             print $1, $2, (slope*$1*nv/nd), (0.50*gravity*$2/(0.50*w*nd*nv^2*corr));
        }' >> f
    }
    
    ##################### Maximum run-ups #######################
    # maximum run-ups for regular shapes
    # OutputLocation { istep = 1 } runup 1.74497 0.377919 0.
    OutputLocation { istep = 1 } {
    awk '{
		if ($1 != "#")
			print $1, $5;
		}' > runup
    } 3.491 0.392 0.
    # maximum run-ups for oblique frontal faces
    EventList { istep = 1 } {
    # "gauge" method for finding max run-up
        OutputLocation {} obliqueSlice-%g RGaugeLoc

        EventScript {} {
            file1="$(ls  obliqueSlice-* | sort -V | tail -n1)"
            awk 'BEGIN{a=0}
                {
                # in a typical location output file, $5 is P field
                if ($1!="#" && $5>0+a)
                    a=$5
                if (NR==2)
                    time=$1
                }
                END{ print time,a }' < "$file1" >> Rmax
            rm obliqueSlice-*
        }
    }

    OutputLocation { step = 1.00 } slice-%g gaugeLoc

    GModule gfsview
    OutputView { istep = 50 } {
    ppm2mpeg > depth.mpg
    } view.gfv

    # OutputLocation { istep = 10 } Rmax 0.763 0.872 0.0
    
    EventBalance { istep = 10 } 0.20
    OutputBalance { istep = 10 } balance
} {
scheme = kurganovPowerLaw
# to take care of "nearly dry" beds
dry = DRY
}
