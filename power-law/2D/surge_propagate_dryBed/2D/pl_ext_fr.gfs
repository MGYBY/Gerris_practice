# Title: The square and circular cylinder impacted by the normal flow
#
# Description:
#

# below this depth the flow is considered "dry"
Define DRY 1.0e-5
Define sinTheta 0.060
Define cosTheta (pow((1.0-pow(sinTheta, 2.0)), 0.50))
Define tanTheta (sinTheta/cosTheta)
Define GRAV 9.81
Define GRAVITYCOEFF (GRAV*cosTheta)
Define nPower 0.30
Define betaVar (2.0*(1.0+2.0*nPower)/(2.0+3.0*nPower))
Define muN 150.0
Define rhoMud 2130.0

Define FROUDE 1.756
Define NORMALDEPTH 0.38093709
Define NORMALVELOCITY 3.3915176

Define width ((NORMALDEPTH)*75.0)
Define ASPECTRATIO (4.0/3.0)
Define NUMBOXY 3
Define NUMBOXX 4
Define NUMBOX 12
Define NUMSEG 17
Define LX (width*5.0*ASPECTRATIO)
Define LY (width*5.0)
Define boxLength (LX/NUMBOXX)
# Define XB ((pow(NORMALVELOCITY,2.0)/(GRAV*sinTheta))*59.615)
Define XB ((NORMALDEPTH/sinTheta)*15.0)

Define EPSILONU 2.0e-5

# mesh adaptivity parameters
Define MAXLEVEL 9
Define MINLEVEL 2

Define DISTPERIODVAL (2.00*NORMALDEPTH/(sinTheta*NORMALVELOCITY))
Define DISTAMPVAL 0.20

Define REFINELENGTH (DISTPERIODVAL*NORMALVELOCITY)

Define WARMUP (4.0*DISTPERIODVAL)

Define TOUTPUTFIELD 1.00
Define TOUTPUTSLICE 1.00

Define simTime 60.0

Define RESTRICTTIMESTEP 2.0e-4
Define REFINETIMEEND 0.110

NUMBOX NUMSEG GfsRiver GfsBox GfsGEdge {
    x = 0.5 y = 0.5 
} {

    # define the source terms
    Global {
        // Parameters
        static double amplitude = DISTAMPVAL;
        static double distPeriod = DISTPERIODVAL;

        // x-source
        static double powerLawX(double h, double qx, double qy) {
            double vel=pow((pow(qx, 2.0)+pow(qy, 2.0)), 0.50)/h;
            return (GRAVITYCOEFF*h*(sinTheta/cosTheta)+(-1.0)*(muN/rhoMud)*(qx/h)/vel*(pow((((1.0+2.0*nPower)/nPower)*vel/h), nPower)));
        }

        // y-source
        static double powerLawY(double h, double qx, double qy) {
            double vel=pow((pow(qx, 2.0)+pow(qy, 2.0)), 0.50)/h;
            return ((-1.0)*(muN/rhoMud)*(qy/h)/vel*(pow((((1.0+2.0*nPower)/nPower)*vel/h), nPower)));
        }

        // depth (p) wave-maker
        static double depth_bc(double t) {
            if ((t<(WARMUP+distPeriod/2.0)) && t>WARMUP) return (NORMALDEPTH*(1.0+amplitude*sin(2.0*M_PI*(t-WARMUP)/distPeriod)));
            else return (NORMALDEPTH);
        }

        // momentum (U) wave-maker
        static double velocity_bc(double t) {
            if ((t<(WARMUP+distPeriod/2.0)) && t>WARMUP) return (FROUDE*pow((GRAVITYCOEFF*pow((NORMALDEPTH*(1.0+amplitude*sin(2.0*M_PI*(t-WARMUP)/distPeriod))),3.0)),0.50));
            else return (NORMALVELOCITY*NORMALDEPTH);
        }
    }

    Time { end = simTime }

    PhysicalParams { L = boxLength g = GRAVITYCOEFF betaCoeff = betaVar }

    # Solid (cube((XB+width/2.0), boxLength/2.0 ,0.0 , width))
    Solid (sphere((XB+width/2.0), (LY/2.0) ,0.0 , width/2.0))
#     Solid (cube((XB+width/2.0), (LY/2.0), 0.0, width))
    RefineSolid MAXLEVEL

    Init {} {
        # Initial normal flow
	    P = 0.0
	    U = 0.0
	    V = 0.0
	    Pmax = 0.
        OBSREF = pow((x-(XB+width/2.0)),2.0)+pow((y-(LY/2.0)),2.0)<pow(width/2.0*1.42,2.0) ? 1.0 : 0.0
        BEGININIT = x<REFINELENGTH ? 1.0 : 0.0
        fr = P>DRY ? (U/P)/pow((GRAVITYCOEFF*P),0.50) : 0.0
    }

    Init { istep = 1 } {
	# # TVD RK3
    # # follow the integration procedure suggested by E.F.Toro
    # # first stage
    # UMed1 = ((P > DRY && fabs(U/P) > EPSILONU) ? U + dt * powerLawX(P, U, V) : 0.)
    # VMed1 = ((P > DRY && fabs(V/P) > EPSILONU) ? V + dt * powerLawY(P, U, V) : 0.)
# 
	# # second stage
	# UMed2 = ((P > DRY && fabs(U/P) > EPSILONU) ? (3.0/4.0)*U + (1.0/4.0)*UMed1 + (1.0/4.0)*dt*powerLawX(P, UMed1, VMed1) : 0.)
	# VMed2 = ((P > DRY && fabs(V/P) > EPSILONU) ? (3.0/4.0)*V + (1.0/4.0)*VMed1 + (1.0/4.0)*dt*powerLawY(P, UMed1, VMed1) : 0.)
# 
	# # third stage
	# U = ((P > DRY && fabs(U/P) > EPSILONU) ? (1.0/3.0)*U+(2.0/3.0)*UMed2+(2.0/3.0)*dt*powerLawX(P, UMed2, VMed2) : 0.)
    # V = ((P > DRY && fabs(V/P) > EPSILONU) ? (1.0/3.0)*V+(2.0/3.0)*VMed2+(2.0/3.0)*dt*powerLawY(P, UMed2, VMed2) : 0.)
    # P = (P > DRY ? P : 0.)
    
    # implicit method
    U = (P > DRY && fabs(Velocity) > EPSILONU) ? (U+dt*tanTheta*GRAVITYCOEFF*P)/(1.0+dt*muN/rhoMud*pow((1+2.0*nPower)/(nPower*P), nPower)*pow(Velocity, nPower-1)/P) :0.0
    V = (P > DRY && fabs(Velocity) > EPSILONU) ? V/(1.0+dt*muN/rhoMud*pow((1+2.0*nPower)/(nPower*P), nPower)*pow(Velocity, nPower-1)/P) :0.0
#     P = (P > DRY ? P : 0.)

    # RK2 TVD
    # # first stage
#     UMed1 = ((P > DRY && fabs(Velocity) > EPSILONU) ? U + dt * powerLawX(P, U, V) : 0.)
#     VMed1 = ((P > DRY && fabs(Velocity) > EPSILONU) ? V + dt * powerLawY(P, U, V) : 0.)
#     ## second stage
#     U = ((P > DRY && fabs(Velocity) > EPSILONU) ? (1.0/2.0)*U+(1.0/2.0)*UMed1+(1.0/2.0)*dt*powerLawX(P, UMed1, VMed1) : 0.)
#     V = ((P > DRY && fabs(Velocity) > EPSILONU) ? (1.0/2.0)*V+(1.0/2.0)*VMed1+(1.0/2.0)*dt*powerLawY(P, UMed1, VMed1) : 0.)

    VORT = (P > DRY ? (dx("V") - dy("U")) : 0.0)
#     RE = rhoMud*(pow(Velocity, (2.0-nPower)))*(pow(P, nPower))/muN

	# check erroneous velocity
#     U = (Velocity < (20.0*NORMALVELOCITY) || dt > 1e-4 || P>0.95*NORMALDEPTH ) ? U :0.0
#     V = (Velocity < (20.0*NORMALVELOCITY) || dt > 1e-4 || P>0.95*NORMALDEPTH ) ? V :0.0
    U = (Velocity < (18.0*NORMALVELOCITY) || P>0.9*NORMALDEPTH ) ? U : U*(18.0*NORMALVELOCITY)/Velocity
    V = (Velocity < (18.0*NORMALVELOCITY) || P>0.9*NORMALDEPTH ) ? V : V*(18.0*NORMALVELOCITY)/Velocity

    Pmax = (P > DRY && H > Pmax ? H : Pmax)
    fr = P>DRY ? (U/P)/pow((GRAVITYCOEFF*P),0.50) : 0.0
    }

    Init { step = TOUTPUTFIELD } {
    		# Re number calc.
		RE = rhoMud*(pow(Velocity, (2.0-nPower)))*(pow(P, nPower))/muN
    }

    AdvectionParams {
#         gradient = gfs_center_van_leer_gradient
# 		gradient = gfs_center_vlSharp04_gradient
		gradient = gfs_center_minmod_gradient
        cfl = 0.3799
        }

    # Refine MAXLEVEL
    Refine ((x<1.1*REFINELENGTH || (pow((x-(XB+width/2.0)),2.0)+pow((y-(LY/2.0)),2.0)<pow(width/2.0*1.4,2.0))) ? MAXLEVEL : MINLEVEL)
    AdaptGradient { istep = 1} {
        cmax = 9.0e-3
        cfactor = 2.75
        # cfactor = 4
        maxlevel = MAXLEVEL
        minlevel = MINLEVEL
    } P

    AdaptGradient { istep = 1} {
        cmax = 0.010
        cfactor = 2.5
        # cfactor = 4
        maxlevel = MAXLEVEL
        minlevel = MINLEVEL
    } fr

    AdaptError { istep = 1 } {
    	cmax = NORMALDEPTH/185.0
    	maxlevel = MAXLEVEL
        minlevel = MINLEVEL
    } Pmax

#     AdaptGradient { istep = 1} {
#         cmax = 0.5e-5
#         cfactor = 2
#         # cfactor = 4
# #         weight = 10
#         maxlevel = x>(XB-width) ? MAXLEVEL : (MINLEVEL+1)
#         minlevel = MINLEVEL
#     } P

#     AdaptError { istart = 1 istep = 1 } { cmax = (NORMALDEPTH/225.0) maxlevel = MAXLEVEL minlevel = MINLEVEL } P

    # Use constant resolution around obstacle
    AdaptFunction { istep = 1 } {
	cmax = 0
	maxlevel = MAXLEVEL
    } OBSREF

    # for the dam-break wave front
    AdaptFunction { start = 0 istep = 1 end = 5.51 } {
	cmax = 0
	maxlevel = MAXLEVEL
    } BEGININIT
    # for FR
    AdaptFunction { start = 14.974 istep = 1 end = 18.72 } {
	cmax = 0
	maxlevel = MAXLEVEL
    } BEGININIT

    AdaptFunction { istep = 1 } {
	cmax = 5.00e-3
	cfactor= 2
	maxlevel = MAXLEVEL
	minlevel = MINLEVEL
    } ( (x>(XB-1.20*width) ) ? fabs(VORT*dL/1.0) : 0.0)

    EventScript { start = 0.0 step = RESTRICTTIMESTEP end = REFINETIMEEND } {

    }

    #(P < DRY ? 0. : P + Zb)

    OutputTime { istep = 10 } stderr
    OutputTime { istep = 10 } ./time-stats.txt

    OutputSimulation { step = TOUTPUTFIELD } snapshot-%g.gfs { variables = P,U,V,VORT,OBSREF,BEGININIT,RE,Pmax,fr }
    
#     OutputSolidForce { istep = 1 } f
    # time normal and CD calculation using awk
    OutputSolidForce { istep = 1 } {
        awk 'BEGIN{
            nd = NORMALDEPTH;
            nv = NORMALVELOCITY;
            slope = sinTheta;
            gravity = GRAV;
            w = width;
	    corr = betaVar;
        }
        {
           if ($1 != "#")
             print $1, $2, (slope*$1*nv/nd), (0.50*gravity*$2/(0.50*w*nd*nv^2*corr));
        }' >> f
    }

#     OutputLocation { step = 1.00 } slice-%g gaugeLoc
#     OutputLocation { istep = 1 } {
#     awk '{
# 		if ($1 != "#")
# 			print $1, $5;
# 		}' > runup
#     } 365.410 68.54925 0.

    OutputLocation { step=TOUTPUTSLICE } slice-%g gaugeLoc
#
#     GModule gfsview
#     OutputView { istep = 50 } {
#     ppm2mpeg > depth.mpg
#     } view.gfv

    # OutputLocation { istep = 10 } Rmax 0.763 0.872 0.0

} {
scheme = kurganovPowerLawRH
dry = DRY
}

