# Title: 2D VOF laminar sheet flow roll wave simulation
#
# Description:
# Normal flow: H = 0.00160556m; U = 0.0560736m/s; So=0.06.
# Power-law fluid: n=0.4, mu_n=0.14, rho=1120

# Domain extent

Define LDOMAIN 0.1158174
Define NUMBOX 3
Define LBOX (LDOMAIN/NUMBOX)

# Normal Flow
Define NORMALDEPTH 0.00160556
Define GRAVITYCOEFF 9.81
Define FR 0.4472
Define NORMALVEL 0.0560736
Define CHANNELSIN 0.060
Define CHANNELCOS (pow((1.0-pow(CHANNELSIN,2.0)),0.50))
Define POWERLAWN 0.40

# disturbance parameters
Define DISTAmp 0.225
# if use non-periodic BC, a wavelength is also needed

# Maximum refinement: guarantee more than 24 cell through normal depth
Define MAXLEVEL 9
Define MINLEVEL 2
# Define MINLEVEL 1

# max run-time
Define TMAX 5.0
Define TOUTPUT 0.20
Define TSNAP 2.0

# mesh adaptivity parameters
Define UEMAX 0.01

# Bingham rheology model
Define MUREF 0.14
Define MUDRHO 1120.0

Define AIRRHO 1.12
Define AIRVIS (0.001/50.0)

#surface tension coefficient
Define WEBER 6400.0
Define STSIGMA (MUDRHO*pow(NORMALVEL,2.0)*NORMALDEPTH/WEBER)

Define HDIST(x) (NORMALDEPTH*(1.0+DISTAmp*sin(2.0*M_PI*(x+LBOX/2.0)/LDOMAIN)))

NUMBOX NUMBOX GfsSimulation GfsBox GfsGEdge {
    # shift origin of the domain
    x = 0.5 y = 0.5
	# y = 0.5
} {
    Global {
    double velDist (double x, double y, double hn, double un, double Lx, double amp) {
        if (y<HDIST(x)) {
	// "const-Fr" pattern seems to reduce fluid-air initial shear, compare to "const-q" pattern
            return ((1.0+2.0*POWERLAWN)/(1.0+POWERLAWN)*(FR*pow(CHANNELCOS*GRAVITYCOEFF*HDIST(x), 0.50))*(1.0-pow((1.0-y/HDIST(x)), (1.0+POWERLAWN)/POWERLAWN)));
        }
        else if (y>=HDIST(x) && y<=(HDIST(x)+8*LBOX/pow(2,MAXLEVEL))) {
	// use this trick to reduce shear at interface
            return ((1.0+2.0*POWERLAWN)/(1.0+POWERLAWN)*(FR*pow(CHANNELCOS*GRAVITYCOEFF*HDIST(x), 0.50))*(((HDIST(x)+8*LBOX/pow(2,MAXLEVEL)-y)/(8*LBOX/pow(2,MAXLEVEL)))));
        }
        else return 0.0;
    }

    double heightDist (double x,  double hn, double Lx, double amp) {
        return (HDIST(x));
    }

    double hydroPressureDist(double y, double x, double Lx, double amp, double hn, double rhoFluid) {
        double gy = GRAVITYCOEFF*CHANNELCOS;
        // double hDist = hn*(1.0+amp*sin(2.0*M_PI*x/Lx));
        if (y<HDIST(x)) return (rhoFluid*gy*y);
        else return 0.0;
    }

	double var (double Tf, double min, double max) {
	// assume filtered by default
    return min + CLAMP(Tf, 0, 1)*(max - min);
	}

	double set_density (double Tf) {
	    return var(Tf, AIRRHO, MUDRHO);
    }

	double MU (double fm, double d2) {
	    double m, mu;
	    double N=POWERLAWN;
	    double mu_max = 90000.0;

	    if (d2 > 0.)
		m = MUREF*exp ((N - 1.)*log (d2*pow(2,0.5)));
	    else {
		    if (N < 1.) m = mu_max;
		    else m = N == 1. ? MUREF : 0.;
		}
		mu = MIN (m, mu_max);

		// harmonic mean
		return 1.0/((1.0-fm)/AIRVIS+fm/mu);
		// algebraic mean
		// return AIRVIS + CLAMP(fm, 0, 1)*(mu - AIRVIS);
    }
    }

    PhysicalParams { L = LBOX }

    Time { end = TMAX dtmax = 1e-3 }
    # Time { end = 0 dtmax = 1e-3 }
    
    AdvectionParams { cfl = 0.450 }

    # We need to tune the solver
    # do not tune solver for now
    ApproxProjectionParams { nitermax = 180 }
    ProjectionParams { nitermax = 180 }

    # VOF tracer and interface positions
#     VariableTracerVOF T
    # a more consistent VOF method
    VariableTracerVOFHeight T

    VariablePosition X T x
    VariablePosition Y T y

    # note that the filter would greatly improve convergence for large density and viscosity ratio
    # Basilisk code use 2 times filter by default
    VariableFiltered Tf T 2
    # VariableFiltered Tf T 4
    # VariableFiltered Tf T 3
    PhysicalParams { alpha = 1./set_density(Tf) }

    # Solid (cube(0.051887875, (2.1*(0.00209955)+0.5*0.10377575*2), 0.0, 0.10377575*2))
    Solid (cube(LDOMAIN/2.0, (2.26*(NORMALDEPTH)+0.5*LDOMAIN*2), 0.0, LDOMAIN*2))
    RefineSolid MAXLEVEL

    # Bingham rheology viscosity
    SourceViscosity {} {
        double muVal = (MU(Tf,D2));
        return muVal;
    }  {
	beta = 0.5
	tolerance = 2e-6
	# beta = 1
	# nitermin = 5
	# nitermax = 125
    }

    # BAsed on unfiltered
    # VariableCurvature K T
    # SourceTension T STSIGMA K

    # initial conditions
    Refine ((y>0.0)&&(y<1.40*NORMALDEPTH) ? MAXLEVEL : MINLEVEL)
    InitFraction T (heightDist(x,NORMALDEPTH,LDOMAIN,DISTAmp)-y)
    Init {} {
        # Initial normal flow
	U = velDist(x, y, NORMALDEPTH, NORMALVEL, LDOMAIN, DISTAmp)
    V = 0.0
    P = hydroPressureDist(y,x,LDOMAIN,DISTAmp,NORMALDEPTH,MUDRHO)

    # extra output variables
    GAMMAOUT = D2*pow(2, 0.50)
    VORTOUT = Vorticity
    # ETMOD = 0.0
    }
    # Init { istep = 1 } {
    #     # extra output variables
    #     ETMOD = ETMOD - dt*CHANNELSIN*U
    # }
    Init { step = TOUTPUT } {
        VORTOUT = Vorticity
        GAMMAOUT = D2*pow(2, 0.50)
    }

    # Track a "band" around the interface to resolve surface gradients
    # properly
    AdaptFunction { istep = 1 } {
	cmax = 0.0
    # cmax = 1e-2
	maxlevel = MAXLEVEL
    minlevel = MINLEVEL
    } (Tf > 0 && Tf < 1)

    # AMR to resolve boundary-layer
    AdaptFunction { istep = 1 } {
	cmax = 0
    cfactor = 2
	maxlevel = (y<(4.0*LBOX/pow(2,MAXLEVEL))) ? MAXLEVEL : (MAXLEVEL-1)
    # minlevel = MINLEVEL
    } Tf

    # AdaptError { istep = 1 } { cmax = 0.01 maxlevel = MAXLEVEL } U
    # AdaptError { istep = 1 } { cmax = 1e-2 maxlevel = max_level } V

    # helpful for wave front resolution
    AdaptVorticity { istep = 1 } { cmax = 0.025 maxlevel = (y<NORMALDEPTH*2.0 ? MAXLEVEL : (MINLEVEL+1)) minlevel = MINLEVEL}

    # gravity
    Source V (-1.0)*GRAVITYCOEFF*CHANNELCOS
    Source U GRAVITYCOEFF*CHANNELSIN

    OutputTime { istep = 10 } stderr
    OutputProjectionStats { istep = 10 } stderr
    OutputDiffusionStats { istep = 10 } stderr

    # remove ejected droplets (just in case)
    # don't know whether this would help. mass conservation problem?
    # remove SGS droplets
    RemoveDroplets { istep = 1 } T 3

    OutputSimulation { step = TOUTPUT } snapshot-%g.gfs { variables = T,Tf,U,V,P,VORTOUT,GAMMAOUT }
    # OutputSimulation { step = 0.10 } dump-%g.gfs
    # OutputSimulation { step = 0.08 } snapshotVTK-%g.vtk { variables = T,U,V format = VTK}
    # OutputSimulation { step = 0.5 } snapshotText-%g.txt {
    #     format = text
    # }

    # OutputLocation { istep = 1 } { awk -f distance.awk > probe1 } gaugeLocHeight { interpolate = 0 }
    # OutputLocation { step = 0.1 } slice-%g gaugeLoc # { interpolate = 0 }

    # energy contents
    OutputScalarSum { istep = 1 } {
	awk '{
          print $3,$5;
          fflush (stdout);
        }' > internalEnergy
    } { v = T*MUDRHO*((0.5*Velocity2)+(GRAVITYCOEFF*CHANNELCOS*y)) }

    OutputScalarSum { istep = 1 } {
	awk '{
          print $3,$5;
          fflush (stdout);
        }' > kineticEnergy
    } { v = T*MUDRHO*(0.5*Velocity2) }

    OutputScalarSum { istep = 1 } {
	awk '{
          print $3,$5;
          fflush (stdout);
        }' > potentialEnergy
    } { v = T*MUDRHO*(GRAVITYCOEFF*CHANNELCOS*y-GRAVITYCOEFF*x*CHANNELSIN) }

    # OutputScalarSum { istep = 1 } {
	# awk '{
    #       print $3,$5;
    #       fflush (stdout);
    #     }' > totalEnergy
    # } { v = T*MUDRHO*((0.5*Velocity2)+(GRAVITYCOEFF*CHANNELCOS*y+ETMOD)) }

    GModule gfsview
    OutputView { step = 0.005 } {
	ppm2mpeg -s 1050x600 > depth.mpg
    } { width = 1600 height = 400 } view.gfv

    # OutputDropletSums { istep = 1 } drops.txt  { v = T*dV   } T

    # dissipation rate calculation
    EventList { istep = 1 } {
        OutputLocation { } endSlice-%g gaugeLoc

        EventScript {} {
            file="$(ls  endSlice-* | sort -V | tail -n1)"

           awk '
            BEGIN {
                FS=" |:"
            }
            {
                # if ($1 == "#") {
                #     # get column indices of the relevant fields (X,Y)
            	# for (i = 1; i <= NF; i++) {
            	#     if ($i == "T")
            	# 	iT = $(i-1);
            	#     else if ($i == "U")
            	# 	iU = $(i-1);
                #     else if ($i == "t")
            	# 	iTIME = $(i-1);
            	# }
                # }
                # else {
                #     T = $iT
                #     U = $iU
                #     Time = $iTime
            	#     print Time, T, U;
            	#     fflush (stdout);
                # }
                # a workaround here
                if ($1 != "#")
                    {print $1, $9, $7;}
            }' < "$file"  > endSlice-temp

            awk '
            BEGIN {
                sum = 0.0;
                time = 0.0;
            } {
                sum += $2*$3;
                time += $1;
            } END {
                # an ugly workaround to get the average of time column
                # TODO: change to "get the first value" method to save computational cost
                time = time/NR;
                print time, sum;
            }' < endSlice-temp > ef_temp

            cat ef_temp >> ef

            rm endSlice-* ef_temp
        }
    }
	
	EventBalance { istep = 20 } 0.1
    OutputBalance { istep = 60 } balance
}

# box 1
GfsBox {
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcDirichlet V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 2
GfsBox {
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcDirichlet V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 3
GfsBox {
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcDirichlet V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}

1 2 right
2 3 right
3 1 right
