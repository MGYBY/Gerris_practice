# Title: 2D VOF laminar sheet flow roll wave simulation
#
# Description:
# Normal flow: H = 0.0018636m; U = 0.170357m/s; So=0.040.

# Domain extent

Define LDOMAIN 0.492
Define NUMBOX 17
Define LBOX (LDOMAIN/NUMBOX)

# Normal Flow
Define NORMALDEPTH 0.0018636
Define GRAVITYCOEFF 9.81
Define FR 1.26
Define NORMALVEL 0.170357
Define CHANNELSIN 0.015
Define CHANNELCOS (pow((1.0-pow(CHANNELSIN,2.0)),0.50))
Define POWERLAWN 1.00

# alternatively, define the domain length using the dimensionless variable
# Define LDOMAIN (2.93468*(pow(NORMALVEL,2.0))/(GRAVITYCOEFF*CHANNELSIN))

# disturbance parameters
Define DISTAmp 0.225
# if use non-periodic BC, a wavelength is also needed

# Maximum refinement: guarantee more than 24 cell through normal depth
Define MAXLEVEL 9
# Define MINLEVEL 2
Define MINLEVEL 1

# max run-time
Define TMAX 15.0
Define TOUTPUT 0.05
Define TSNAP 2.0

# mesh adaptivity parameters
Define UEMAX 0.01

# Bingham rheology model
Define MUREF 0.001
Define MUDRHO 1000.0

Define AIRRHO 1.12
Define AIRVIS (MUREF/50.0)

#surface tension coefficient
Define WEBER 650.0
Define STSIGMA (MUDRHO*pow(NORMALVEL,2.0)*NORMALDEPTH/WEBER)

Define HDIST(x) (NORMALDEPTH*(1.0+DISTAmp*sin(2.0*M_PI*(x+LBOX/2.0)/LDOMAIN)))

NUMBOX NUMBOX GfsSimulation GfsBox GfsGEdge {
    # shift origin of the domain
    x = 0.5 y = 0.5
	# y = 0.5
} {
    Global {
    double velDist (double x, double y, double hn, double un, double Lx, double amp) {
        if (y<HDIST(x)) {
	// "const-Fr" pattern seems to reduce fluid-air initial shear, compare to "const-q" pattern
            return ((1.0+2.0*POWERLAWN)/(1.0+POWERLAWN)*(FR*pow(CHANNELCOS*GRAVITYCOEFF*HDIST(x), 0.50))*(1.0-pow((1.0-y/HDIST(x)), (1.0+POWERLAWN)/POWERLAWN)));
        }
        else if (y>=HDIST(x) && y<=(HDIST(x)+8*LBOX/pow(2,MAXLEVEL))) {
	// use this trick to reduce shear at interface
            return ((1.0+2.0*POWERLAWN)/(1.0+POWERLAWN)*(FR*pow(CHANNELCOS*GRAVITYCOEFF*HDIST(x), 0.50))*(((HDIST(x)+8*LBOX/pow(2,MAXLEVEL)-y)/(8*LBOX/pow(2,MAXLEVEL)))));
        }
        else return 0.0;
    }

    double heightDist (double x,  double hn, double Lx, double amp) {
        return (HDIST(x));
    }

    double hydroPressureDist(double y, double x, double Lx, double amp, double hn, double rhoFluid) {
        double gy = GRAVITYCOEFF*CHANNELCOS;
        // double hDist = hn*(1.0+amp*sin(2.0*M_PI*x/Lx));
        # if (y<HDIST(x)) return (rhoFluid*gy*y);
	if (y<HDIST(x)) return (rhoFluid*gy*(HDIST(x)-y));
        else return 0.0;
    }

	double var (double Tf, double min, double max) {
	// assume filtered by default
    return min + CLAMP(Tf, 0, 1)*(max - min);
	}

	double set_density (double Tf) {
	    return var(Tf, AIRRHO, MUDRHO);
    }

	double MU (double fm, double d2) {
	    double m, mu;
	    double N=POWERLAWN;
	    double mu_max = 60000.0;

	    if (d2 > 0.)
		m = MUREF*exp ((N - 1.)*log (d2));
	    else {
		    if (N < 1.) m = mu_max;
		    else m = N == 1. ? MUREF : 0.;
		}
		mu = MIN (m, mu_max);

		// harmonic mean
		// return 1.0/((1.0-fm)/AIRVIS+fm/mu);
		// algebraic mean
		return AIRVIS + CLAMP(fm, 0, 1)*(mu - AIRVIS);
    }
    }

    PhysicalParams { L = LBOX }

    Time { end = 15.0 dtmax = 2e-3 }
    
    # Enhance convergence with Hypre, tuned parameters. More levels are preferred.
    GModule hypre { verbose = 0 coarsening_type = hmis  nlevel = 13}
    
    AdvectionParams { cfl = 0.455 }

    # We need to tune the solver
    # do not tune solver for now
    # ApproxProjectionParams { tolerance = 1e-4 nitermax = 175 nitermin = 6}
    # ProjectionParams { tolerance = 1e-4  nitermax = 175 nitermin = 6}

    # VOF tracer and interface positions
    # VariableTracerVOF T
    # a more consistent VOF method
    VariableTracerVOFHeight T
    
    # passive scalar transport
    VariableTracerVOF Ti
    InitFraction Ti ({
	    double top = TRACERTOPYCOORD - y;
	    double bottom = y - TRACERBOTTOMYCOORD;
	    return union (top, bottom);
    })

    VariablePosition X T x
    VariablePosition Y T y

    # note that the filter would greatly improve convergence for large density and viscosity ratio
    # Basilisk code use 2 times filter by default
    # VariableFiltered Tf T 1
    VariableFiltered Tf T 2
    # VariableFiltered Tf T 3
    PhysicalParams { alpha = 1./set_density(Tf) }
    
    # note that if parallelism is used, sufficient partition should be used 
    Solid (cube(LDOMAIN/2.0, (2.50*(NORMALDEPTH)+0.5*LDOMAIN*2), 0.0, LDOMAIN*2))
    RefineSolid MAXLEVEL
    
    # more control on the top BC
    SurfaceBc P Dirichlet (-1.0*AIRRHO*CHANNELCOS*GRAVITYCOEFF*(2.36-1.0)*NORMALDEPTH)
    SurfaceBc U Neumann 0.0
    SurfaceBc V Neumann 0.0
    SurfaceBc T Neumann 0.0
    SurfaceBc Ti Neumann 0.0

    # Bingham rheology viscosity
    SourceViscosity {} {
        double muVal = (MU(Tf,D2));
        return muVal;
    }  {
	beta = 1
	tolerance = 0.2e-5
	# beta = 0.5
	# nitermin = 5
	# nitermax = 125
    }

    # BAsed on unfiltered
    VariableCurvature K T
    SourceTension T STSIGMA K

    # initial conditions
    Refine ((y>0.0)&&(y<1.40*NORMALDEPTH) ? MAXLEVEL : MINLEVEL)
    InitFraction T (heightDist(x,NORMALDEPTH,LDOMAIN,DISTAmp)-y)
    Init {} {
        # Initial normal flow
	U = velDist(x, y, NORMALDEPTH, NORMALVEL, LDOMAIN, DISTAmp)
    V = 0.0
    P = hydroPressureDist(y,x,LDOMAIN,DISTAmp,NORMALDEPTH,MUDRHO)
    }

    # Track a "band" around the interface to resolve surface gradients
    # properly
    AdaptGradient { istep = 1 } {
	cmax = 0.0
    # cmax = 1e-2
	maxlevel = MAXLEVEL
    minlevel = MINLEVEL
    } T

    # Use constant resolution inside the granular material
    # AdaptFunction { istep = 1 } {
	# cmax = 0
    # cfactor = 2
	# maxlevel = MAXLEVEL
    # # minlevel = MINLEVEL
    # } (T > 0 && T < 1)
    # # (T > 0 && T < 1)
    # # T
    
    # AMR to resolve boundary-layer
    AdaptFunction { istep = 1 } {
	cmax = 0
    cfactor = 2
	maxlevel = (y<(4.0*LBOX/pow(2,MAXLEVEL))) ? MAXLEVEL : (MAXLEVEL-3)
    # minlevel = MINLEVEL
    } T

    # AdaptError { istep = 1 } { cmax = 0.01 maxlevel = MAXLEVEL } U
    # AdaptError { istep = 1 } { cmax = 1e-2 maxlevel = max_level } V

    # helpful for wave front resolution
    AdaptVorticity { istep = 1 } { cmax = 0.052 maxlevel = (y<NORMALDEPTH*2.0 ? MAXLEVEL : (MINLEVEL+1)) minlevel = MINLEVEL}

    # gravity
    Source V (-1.0)*GRAVITYCOEFF*CHANNELCOS
    Source U GRAVITYCOEFF*CHANNELSIN

    OutputTime { istep = 10 } stderr
    OutputProjectionStats { istep = 10 } stderr
    OutputDiffusionStats { istep = 10 } stderr
    OutputTime { istep = 10 } ./time-stats.txt

    # remove ejected droplets (just in case)
    # don't know whether this would help. mass conservation problem?
    # RemoveDroplets { istep = 1 } T -3

    OutputSimulation { step = 0.03 } snapshot-%g.gfs { variables = T,U,V }
    OutputSimulation { step = 0.08 } dump-%g.gfs
    # VTK & Tecplot output does not work for parallelism!
    OutputSimulation { step = 0.08 } snapshotVTK-%g.vtk { variables = T,U,V format = VTK}
    # OutputSimulation { step = 0.5 } snapshotText-%g.txt {
    #     format = text
    # }

    OutputLocation { istep = 1 } { awk -f distance.awk > probe1 } gaugeLoc { interpolate = 0 }
    # OutputLocation { step = 0.1 } slice-%g gaugeLoc # { interpolate = 0 }

    GModule gfsview
    OutputView { istep = 75 } {
	ppm2mpeg -s 1050x600 > depth.mpg
    } { width = 1600 height = 400 } view.gfv

    # OutputDropletSums { istep = 1 } drops.txt  { v = T*dV   } T
    
    # energy contents
    OutputScalarSum { istep = 1 } {
	awk '{
          print $3,$5;
          fflush (stdout);
        }' > totalEnergy
    } { v = T*MUDRHO*((0.5*Velocity2)+(GRAVITYCOEFF*CHANNELCOS*y)) }

    OutputScalarSum { istep = 1 } {
	awk '{
          print $3,$5;
          fflush (stdout);
        }' > kineticEnergy
    } { v = T*MUDRHO*(0.5*Velocity2) }

    OutputScalarSum { istep = 1 } {
	awk '{
          print $3,$5;
          fflush (stdout);
        }' > potentialEnergy
    } { v = T*MUDRHO*(GRAVITYCOEFF*CHANNELCOS*y) }
	
	EventBalance { istep = 20 } 0.20
    OutputBalance { istep = 60 } balance
}
# box 1
GfsBox {
    pid = 0
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcNeumann V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 2
GfsBox {
    pid = 0
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcNeumann V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 3
GfsBox {
    pid = 0
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcNeumann V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 4
GfsBox {
    pid = 0
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcNeumann V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 5
GfsBox {
    pid = 1
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcNeumann V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 6
GfsBox {
    pid = 1
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcNeumann V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 7
GfsBox {
    pid = 1
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcNeumann V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 8
GfsBox {
    pid = 1
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcNeumann V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 9
GfsBox {
    pid = 2
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcNeumann V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 10
GfsBox {
    pid = 2
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcNeumann V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 11
GfsBox {
    pid = 2
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcNeumann V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 12
GfsBox {
    pid = 2
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcNeumann V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 13
GfsBox {
    pid = 3
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcNeumann V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 14
GfsBox {
    pid = 3
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcNeumann V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 15
GfsBox {
    pid = 3
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcNeumann V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 16
GfsBox {
    pid = 3
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcNeumann V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 17
GfsBox {
    pid = 3
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcNeumann V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
1 2 right
2 3 right
3 4 right
4 5 right
5 6 right
6 7 right
7 8 right
8 9 right
9 10 right
10 11 right
11 12 right
12 13 right
13 14 right
14 15 right
15 16 right
16 17 right
17 1 right
