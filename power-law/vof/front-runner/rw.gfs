# Title: 2D VOF laminar sheet flow roll wave simulation
#
# Description:
# Normal flow: H = 0.0020933486m; U = 0.214942405m/s; So=0.015.
# inlet-outlet BC

# Domain extent
Define LDOMAIN 9.75
Define NUMBOX 37.0
Define LBOX (LDOMAIN/NUMBOX)

# Normal Flow
Define NORMALDEPTH 0.0020933486
Define GRAVITYCOEFF 9.81
Define FR 1.50
Define NORMALVEL 0.214942405
Define CHANNELSIN 0.015
Define CHANNELCOS (pow((1.0-pow(CHANNELSIN,2.0)),0.50))

# disturbance parameters
Define DISTAmp 0.225
Define DISTPERIOD 1.08

# Maximum refinement: guarantee more than 16 cell through normal depth
Define MAXLEVEL 11
# Define MINLEVEL 1
Define MINLEVEL 0
Define INITLEVEL 8

# max run-time
Define TMAX 64.0
Define TOUTPUT 0.05
Define TSNAP 2.0

# mesh adaptivity parameters
Define UEMAX 0.01
Define VORTMAX 0.09

# Power-law rheology model
Define POWERLAWN 1.00
Define MUREF 0.001
Define MUDRHO 1000.0

Define AIRRHO 1.12
Define AIRVIS (MUREF/50.0)

#surface tension coefficient
Define STSIGMA 0.072

# inlet temporally-varying BC
Define HDIST(t) (NORMALDEPTH*(1.0+DISTAmp*sin(2.0*M_PI*t/DISTPERIOD)))

# Define INITLENGTH (LBOX/32.0)

37 36 GfsSimulation GfsBox GfsGEdge {
    # shift origin of the domain
    x = 0.5 y = 0.5
} {
    Global {
        double velocity_bc (double y, double t) {
            if (y<HDIST(t)) {
                // constant discharge type
                // return ((1.0+2.0*POWERLAWN)/(1.0+POWERLAWN)*(hn*un/HDIST(t))*(1.0-pow((1.0-y/HDIST(t)), (1.0+POWERLAWN)/POWERLAWN)));
                // constant Fr type
                return ((1.0+2.0*POWERLAWN)/(1.0+POWERLAWN)*(FR*pow((GRAVITYCOEFF*HDIST(t)),0.50))*(1.0-pow((1.0-y/HDIST(t)), (1.0+POWERLAWN)/POWERLAWN)));
            }
            // set up in this way to reduce shear between two phases
            else return ((1.0+2.0*POWERLAWN)/(1.0+POWERLAWN)*(FR*pow((GRAVITYCOEFF*HDIST(t)),0.50))*(1.0));
        }

        double depth_bc (double y,  double t) {
            return (y<HDIST(t) ? 1.0 : 0.0);
        }

        double hydroPressureDist(double y, double t) {
            return (y<HDIST(t) ? (MUDRHO*(GRAVITYCOEFF*CHANNELCOS)*y) : 0.0);
        }
	
	double hydroPressure_init (double y) {
        return (y<=NORMALDEPTH ? (MUDRHO*(GRAVITYCOEFF*CHANNELCOS)*(NORMALDEPTH-y)) : 0.0-AIRRHO*GRAVITYCOEFF*CHANNELCOS*(y-NORMALDEPTH));
    	}

        double var (double Tf, double min, double max) {
        return (min + CLAMP(Tf, 0, 1)*(max - min));
        }

        double set_density (double Tf) {
            return (var(Tf, AIRRHO, MUDRHO));
        }

        double MU (double fm, double d2) {
            double m, mu;
            double N=POWERLAWN;
            double mu_max = 100000.0;

            if (d2 > 0.)
            m = MUREF*exp ((N - 1.)*log (d2*pow(2,0.5)));
            else {
                if (N < 1.) m = mu_max;
                else m = N == 1. ? MUREF : 0.;
            }
            mu = MIN (m, mu_max);

            // harmonic mean
            // return 1.0/((1.0-fm)/AIRVIS+fm/mu);
            // algebraic mean
            return AIRVIS + CLAMP(fm, 0, 1)*(mu - AIRVIS);
        }
    }

    PhysicalParams { L = LBOX }

    Time { end = 64.0 dtmax = 2e-3 }
    
    AdvectionParams { cfl = 0.450 }

    # We need to tune the solver
    # tune solver TE for now
    ApproxProjectionParams { tolerance = 7.0e-4 nitermax = 200 nitermin = 1 }
    ProjectionParams { tolerance = 7.0e-4  nitermax = 200 nitermin = 1 }

    # VOF tracer and interface positions
    VariableTracerVOF T

    VariablePosition X T x
    VariablePosition Y T y

    # note that the filter would greatly improve convergence for large density and viscosity ratio
    # Basilisk code use 2 times filter by default
    # VariableFiltered Tf T 1
    VariableFiltered Tf T 2
    # VariableFiltered Tf T 3
    PhysicalParams { alpha = 1./set_density(Tf) }

    # Bingham rheology viscosity
    SourceViscosity {} {
        double muVal = (MU(Tf,D2));
        return muVal;
    }  {
	beta = 1
	nitermax = 125
	tolerance = 0.15e-5
	# beta = 0.5
	# nitermin = 5
    }

    # BAsed on unfiltered
    VariableCurvature K T
    SourceTension T STSIGMA K

    # initial conditions
    Refine 7
    Refine ((y>0.0)&&(y<1.25*NORMALDEPTH) ? MAXLEVEL : MINLEVEL)
    # Initial normal flow
    InitFraction T (NORMALDEPTH-y)
    Init {} {
    # Initial normal flow
    # setup velocity in this way to reduce shear instability between two phases
	U = y<NORMALDEPTH ? ((1.0+2.0*POWERLAWN)/(1.0+POWERLAWN)*NORMALVEL*(1.0-pow((1.0-y/NORMALDEPTH), (1.0+POWERLAWN)/POWERLAWN))) : ((1.0+2.0*POWERLAWN)/(1.0+POWERLAWN)*NORMALVEL*(1.0))
    V = 0.0
    
    # not correct here
    # P = y<NORMALDEPTH ? (MUDRHO*(GRAVITYCOEFF*CHANNELCOS)*y) : 0.0
    P = hydroPressure_init (y)
    }

    # Track a "band" around the interface to resolve surface gradients
    # properly
    AdaptGradient { istep = 1 } {
	cmax = 0.0
    # cmax = 1e-2
    # maxlevel = MAXLEVEL
	maxlevel = (y<NORMALDEPTH*4.2 ? MAXLEVEL : MINLEVEL)
    # minlevel = MINLEVEL
    } T

    # Use constant resolution inside the granular material
    # AdaptFunction { istep = 1 } {
	# cmax = 0
    # cfactor = 2
	# maxlevel = MAXLEVEL
    # # minlevel = MINLEVEL
    # } (T > 0 && T < 1)
    # # (T > 0 && T < 1)
    # # T

    # AdaptError { istep = 1 } { cmax = 0.01 maxlevel = MAXLEVEL } U
    # AdaptError { istep = 1 } { cmax = 1e-2 maxlevel = max_level } V

    # helpful for wave front resolution
    # AdaptVorticity { istep = 1 } { cmax = 0.09 maxlevel = MAXLEVEL minlevel = MINLEVEL}
    AdaptVorticity { istep = 1 } { cmax = VORTMAX maxlevel = (y<NORMALDEPTH*4.2 ? MAXLEVEL : MINLEVEL) minlevel = MINLEVEL}

    # gravity
    Source V (-1.0)*GRAVITYCOEFF*CHANNELCOS
    Source U GRAVITYCOEFF*CHANNELSIN

    OutputTime { istep = 10 } stderr
    OutputProjectionStats { istep = 10 } stderr
    OutputDiffusionStats { istep = 10 } stderr

    # remove ejected droplets (just in case)
    # ensure only remove "comet" droplets
    # RemoveDroplets { istep = 1 } T -3
    RemoveDroplets { istep = 10 } T 10 (y>NORMALDEPTH*4.2 ? T : 0)

    OutputSimulation { step = 0.025 } snapshot-%g.gfs { variables = T,U,V }
    OutputSimulation { step = 0.1 } dump-%g.gfs
    OutputSimulation { step = 0.1 } snapshotTec-%g.plt { variables = T,U,V,P format = Tecplot }
    # OutputSimulation { step = 0.5 } snapshotText-%g.txt {
    #     format = text
    # }

    OutputLocation { istep = 1 } { awk -f distance.awk > probe1 } gaugeLoc1 { interpolate = 0 }
    OutputLocation { istep = 1 } { awk -f distance.awk > probe2 } gaugeLoc2 { interpolate = 0 }
    OutputLocation { istep = 1 } { awk -f distance.awk > probe3 } gaugeLoc3 { interpolate = 0 }
    OutputLocation { istep = 1 } { awk -f distance.awk > probe4 } gaugeLoc4 { interpolate = 0 }
    OutputLocation { istep = 1 } { awk -f distance.awk > probe5 } gaugeLoc5 { interpolate = 0 }
    # OutputLocation { step = 0.1 } slice-%g gaugeLoc # { interpolate = 0 }

    GModule gfsview
    OutputView { istep = 50 } {
	ppm2mpeg -s 1050x600 > depth.mpg
    } { width = 1600 height = 400 } view2.gfv

    # OutputDropletSums { istep = 1 } drops.txt  { v = T*dV   } T
}
