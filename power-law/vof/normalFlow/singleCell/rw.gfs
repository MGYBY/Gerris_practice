# Title: 2D VOF laminar sheet flow roll wave simulation
#
# Description:
# Normal flow: H = 0.0299631m; U = 0.541672m/s; So=0.060.

# Domain extent
# follow Liu & Mei's choice, periodic BC
# Normal Flow
Define NORMALDEPTH 0.00603941
Define GRAVITYCOEFF 9.81
Define FR 1.00
Define NORMALVEL 0.541672
Define CHANNELSIN 0.060
Define CHANNELCOS (pow((1.0-pow(CHANNELSIN,2.0)),0.50))
Define POWERLAWN 0.20

Define LDOMAIN (NORMALDEPTH*2.0/1.0)
Define NUMBOX 96
Define LBOX (LDOMAIN/NUMBOX)

# Maximum refinement: guarantee more than 24 cell through normal depth
Define LEVEL 0

Define DISTAmp 0.0

# Bingham rheology model
Define MUREF 1.383
Define MUDRHO 1202.310

Define AIRRHO 1.12
Define AIRVIS (MUREF/100.0)

#surface tension coefficient
Define STSIGMA 0.072

Define HDIST(x) (NORMALDEPTH*(1.0+DISTAmp*sin(2.0*M_PI*(x+LDOMAIN/2.0)/LDOMAIN)))

# Define INITLENGTH (LBOX/32.0)

100 199 GfsSimulation GfsBox GfsGEdge {
    # shift origin of the domain
    x = 0.5 y = 0.5
	# y = 0.5
} {
    Global {
    // double velDist (double x, double y, double hn, double un, double Lx, double amp) {
    //     if (y<HDIST(x)) {
	// // "const-Fr" pattern seems to reduce fluid-air initial shear, compare to "const-q" pattern
    //         return ((1.0+2.0*POWERLAWN)/(1.0+POWERLAWN)*(FR*pow(CHANNELCOS*GRAVITYCOEFF*HDIST(x), 0.50))*(1.0-pow((1.0-y/HDIST(x)), (1.0+POWERLAWN)/POWERLAWN)));
    //     }
    //     else if (y>=HDIST(x) && y<=(HDIST(x)+8*LBOX/pow(2,MAXLEVEL))) {
	// // use this trick to reduce shear at interface
    //         return ((1.0+2.0*POWERLAWN)/(1.0+POWERLAWN)*(FR*pow(CHANNELCOS*GRAVITYCOEFF*HDIST(x), 0.50))*(((HDIST(x)+8*LBOX/pow(2,MAXLEVEL)-y)/(8*LBOX/pow(2,MAXLEVEL)))));
    //     }
    //     else return 0.0;
    // }

    double heightDist (double x,  double hn, double Lx, double amp) {
        return (HDIST(x));
    }

    double hydroPressureDist(double y, double x, double Lx, double amp, double hn, double rhoFluid) {
        double gy = GRAVITYCOEFF*CHANNELCOS;
        // double hDist = hn*(1.0+amp*sin(2.0*M_PI*x/Lx));
        if (y<HDIST(x)) return (rhoFluid*gy*y);
        else return 0.0;
    }

	double var (double Tf, double min, double max) {
	// assume filtered by default
    return min + CLAMP(Tf, 0, 1)*(max - min);
	}

	double set_density (double Tf) {
	    return var(Tf, AIRRHO, MUDRHO);
    }

	double MU (double fm, double d2) {
	    double m, mu;
	    double N=POWERLAWN;
	    double mu_max = 1.0e8;

	    if (d2 > 0.)
		// m = MUREF*exp ((N - 1.)*log (d2));
		// Ruyer-Quil et al. 2012 formulation is consistent
		m = MUREF*exp ((N - 1.)*log (d2*pow(2,0.5)));
	    else {
		    if (N < 1.) m = mu_max;
		    else m = N == 1. ? MUREF : 0.;
		}
		mu = MIN (m, mu_max);

		// harmonic mean
		return 1.0/((1.0-fm)/AIRVIS+fm/mu);
		// algebraic mean
		// return AIRVIS + CLAMP(fm, 0, 1)*(mu - AIRVIS);
    }
    }

    PhysicalParams { L = LBOX }

    Time { end = 64.0 dtmax = 2e-3 }
    
    AdvectionParams { cfl = 0.45 }

    GModule hypre

    # We need to tune the solver
    # do not tune solver for now
    # ApproxProjectionParams { tolerance = 1e-4 nitermax = 175 nitermin = 6}
    # ProjectionParams { tolerance = 1e-4  nitermax = 175 nitermin = 6}

    # VOF tracer and interface positions
#     VariableTracerVOF T
    # a more consistent VOF method
    VariableTracerVOFHeight T

    VariablePosition X T x
    VariablePosition Y T y

    # note that the filter would greatly improve convergence for large density and viscosity ratio
    # Basilisk code use 2 times filter by default
    # VariableFiltered Tf T 1
    VariableFiltered Tf T 2
    # VariableFiltered Tf T 3
    PhysicalParams { alpha = 1./set_density(Tf) }

    # Bingham rheology viscosity
    SourceViscosity {} {
        double muVal = (MU(Tf,D2));
        return muVal;
    }  {
	beta = 0.5
	tolerance = 0.2e-5
	# beta = 0.5
	# nitermin = 5
	# nitermax = 125
    }

    # BAsed on unfiltered
    # VariableCurvature K T
    # SourceTension T STSIGMA K

    # initial conditions
#     Refine LEVEL
    InitFraction T (heightDist(x,NORMALDEPTH,LDOMAIN,DISTAmp)-y)
    Init {} {
        # Initial normal flow
	# U = velDist(x, y, NORMALDEPTH, NORMALVEL, LDOMAIN, DISTAmp)
    U = 0.0
    V = 0.0
    P = hydroPressureDist(y,x,LDOMAIN,DISTAmp,NORMALDEPTH,MUDRHO)
    }

    # no mesh adaptivity
    # AdaptGradient { istep = 1 } {
	# cmax = 0.0
    # # cmax = 1e-2
	# maxlevel = MAXLEVEL
    # minlevel = MINLEVEL
    # } T

    # helpful for wave front resolution
    # AdaptVorticity { istep = 1 } { cmax = 0.09 maxlevel = MAXLEVEL minlevel = MINLEVEL}

    # gravity
    Source V (-1.0)*GRAVITYCOEFF*CHANNELCOS
    Source U GRAVITYCOEFF*CHANNELSIN

    OutputTime { istep = 10 } stderr
    OutputProjectionStats { istep = 10 } stderr
    OutputDiffusionStats { istep = 10 } stderr
    OutputTime { istep = 10 } ./time-stats.txt
    OutputProjectionStats { istep = 10 } ./proj-stats.txt
    OutputDiffusionStats { istep = 10 } ./diff-stats.txt

    # remove ejected droplets (just in case)
    # don't know whether this would help. mass conservation problem?
    # RemoveDroplets { istep = 1 } T -3

    OutputSimulation { step = 1.0 } snapshot-%g.gfs { variables = T,Tf,U,V }
    # OutputSimulation { step = 4.0 } dump-%g.gfs
    # OutputSimulation { step = 0.1 } snapshotVTK-%g.vtk { variables = T,U,V format = VTK}
    # OutputSimulation { step = 0.5 } snapshotText-%g.txt {
    #     format = text
    # }

    # OutputLocation { istep = 1 } { awk -f distance.awk > probe1 } gaugeLoc { interpolate = 0 }
    # OutputLocation { step = 0.1 } slice-%g gaugeLoc # { interpolate = 0 }

    OutputLocation { step = 1.0 } centerSlice-%g centerlineGaugeLoc

    # GModule gfsview
    # OutputView { istep = 50 } {
	# ppm2mpeg -s 1050x600 > depth.mpg
    # } { width = 1600 height = 400 } view.gfv

    # OutputDropletSums { istep = 1 } drops.txt  { v = T*dV   } T
}

GfsBox {
bottom = Boundary {
    BcDirichlet U 0
}
}
# 1th box above
GfsBox { }
# 2th box above
GfsBox { }
# 3th box above
GfsBox { }
# 4th box above
GfsBox { }
# 5th box above
GfsBox { }
# 6th box above
GfsBox { }
# 7th box above
GfsBox { }
# 8th box above
GfsBox { }
# 9th box above
GfsBox { }
# 10th box above
GfsBox { }
# 11th box above
GfsBox { }
# 12th box above
GfsBox { }
# 13th box above
GfsBox { }
# 14th box above
GfsBox { }
# 15th box above
GfsBox { }
# 16th box above
GfsBox { }
# 17th box above
GfsBox { }
# 18th box above
GfsBox { }
# 19th box above
GfsBox { }
# 20th box above
GfsBox { }
# 21th box above
GfsBox { }
# 22th box above
GfsBox { }
# 23th box above
GfsBox { }
# 24th box above
GfsBox { }
# 25th box above
GfsBox { }
# 26th box above
GfsBox { }
# 27th box above
GfsBox { }
# 28th box above
GfsBox { }
# 29th box above
GfsBox { }
# 30th box above
GfsBox { }
# 31th box above
GfsBox { }
# 32th box above
GfsBox { }
# 33th box above
GfsBox { }
# 34th box above
GfsBox { }
# 35th box above
GfsBox { }
# 36th box above
GfsBox { }
# 37th box above
GfsBox { }
# 38th box above
GfsBox { }
# 39th box above
GfsBox { }
# 40th box above
GfsBox { }
# 41th box above
GfsBox { }
# 42th box above
GfsBox { }
# 43th box above
GfsBox { }
# 44th box above
GfsBox { }
# 45th box above
GfsBox { }
# 46th box above
GfsBox { }
# 47th box above
GfsBox { }
# 48th box above
GfsBox { }
# 49th box above
GfsBox { }
# 50th box above
GfsBox { }
# 51th box above
GfsBox { }
# 52th box above
GfsBox { }
# 53th box above
GfsBox { }
# 54th box above
GfsBox { }
# 55th box above
GfsBox { }
# 56th box above
GfsBox { }
# 57th box above
GfsBox { }
# 58th box above
GfsBox { }
# 59th box above
GfsBox { }
# 60th box above
GfsBox { }
# 61th box above
GfsBox { }
# 62th box above
GfsBox { }
# 63th box above
GfsBox { }
# 64th box above
GfsBox { }
# 65th box above
GfsBox { }
# 66th box above
GfsBox { }
# 67th box above
GfsBox { }
# 68th box above
GfsBox { }
# 69th box above
GfsBox { }
# 70th box above
GfsBox { }
# 71th box above
GfsBox { }
# 72th box above
GfsBox { }
# 73th box above
GfsBox { }
# 74th box above
GfsBox { }
# 75th box above
GfsBox { }
# 76th box above
GfsBox { }
# 77th box above
GfsBox { }
# 78th box above
GfsBox { }
# 79th box above
GfsBox { }
# 80th box above
GfsBox { }
# 81th box above
GfsBox { }
# 82th box above
GfsBox { }
# 83th box above
GfsBox { }
# 84th box above
GfsBox { }
# 85th box above
GfsBox { }
# 86th box above
GfsBox { }
# 87th box above
GfsBox { }
# 88th box above
GfsBox { }
# 89th box above
GfsBox { }
# 90th box above
GfsBox { }
# 91th box above
GfsBox { }
# 92th box above
GfsBox { }
# 93th box above
GfsBox { }
# 94th box above
GfsBox { }
# 95th box above
GfsBox { }
# 96th box above
GfsBox { }
# 97th box above
GfsBox { }
# 98th box above
GfsBox { }
# 99th box above
GfsBox {
    top = Boundary
}
# last box above
1 1 right
2 2 right
3 3 right
4 4 right
5 5 right
6 6 right
7 7 right
8 8 right
9 9 right
10 10 right
11 11 right
12 12 right
13 13 right
14 14 right
15 15 right
16 16 right
17 17 right
18 18 right
19 19 right
20 20 right
21 21 right
22 22 right
23 23 right
24 24 right
25 25 right
26 26 right
27 27 right
28 28 right
29 29 right
30 30 right
31 31 right
32 32 right
33 33 right
34 34 right
35 35 right
36 36 right
37 37 right
38 38 right
39 39 right
40 40 right
41 41 right
42 42 right
43 43 right
44 44 right
45 45 right
46 46 right
47 47 right
48 48 right
49 49 right
50 50 right
51 51 right
52 52 right
53 53 right
54 54 right
55 55 right
56 56 right
57 57 right
58 58 right
59 59 right
60 60 right
61 61 right
62 62 right
63 63 right
64 64 right
65 65 right
66 66 right
67 67 right
68 68 right
69 69 right
70 70 right
71 71 right
72 72 right
73 73 right
74 74 right
75 75 right
76 76 right
77 77 right
78 78 right
79 79 right
80 80 right
81 81 right
82 82 right
83 83 right
84 84 right
85 85 right
86 86 right
87 87 right
88 88 right
89 89 right
90 90 right
91 91 right
92 92 right
93 93 right
94 94 right
95 95 right
96 96 right
97 97 right
98 98 right
99 99 right
100 100 right
1 2 top
2 3 top
3 4 top
4 5 top
5 6 top
6 7 top
7 8 top
8 9 top
9 10 top
10 11 top
11 12 top
12 13 top
13 14 top
14 15 top
15 16 top
16 17 top
17 18 top
18 19 top
19 20 top
20 21 top
21 22 top
22 23 top
23 24 top
24 25 top
25 26 top
26 27 top
27 28 top
28 29 top
29 30 top
30 31 top
31 32 top
32 33 top
33 34 top
34 35 top
35 36 top
36 37 top
37 38 top
38 39 top
39 40 top
40 41 top
41 42 top
42 43 top
43 44 top
44 45 top
45 46 top
46 47 top
47 48 top
48 49 top
49 50 top
50 51 top
51 52 top
52 53 top
53 54 top
54 55 top
55 56 top
56 57 top
57 58 top
58 59 top
59 60 top
60 61 top
61 62 top
62 63 top
63 64 top
64 65 top
65 66 top
66 67 top
67 68 top
68 69 top
69 70 top
70 71 top
71 72 top
72 73 top
73 74 top
74 75 top
75 76 top
76 77 top
77 78 top
78 79 top
79 80 top
80 81 top
81 82 top
82 83 top
83 84 top
84 85 top
85 86 top
86 87 top
87 88 top
88 89 top
89 90 top
90 91 top
91 92 top
92 93 top
93 94 top
94 95 top
95 96 top
96 97 top
97 98 top
98 99 top
99 100 top
