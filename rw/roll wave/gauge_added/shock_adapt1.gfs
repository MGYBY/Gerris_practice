# Title: The square and circular cylinder impacted by the normal flow
#
# Description:
#

# below this depth the flow is considered "dry"
Define DRY 1e-5
Define GRAVITYCOEFF 9.81
Define CHANNELSLOPE 0.05011
Define NORMALDEPTH 0.00798
Define NORMALVELOCITY 1.038
Define CF (2.0*GRAVITYCOEFF*CHANNELSLOPE*NORMALDEPTH/pow(NORMALVELOCITY,2.0))
Define FROUDE (NORMALVELOCITY/pow((GRAVITYCOEFF*NORMALDEPTH),0.50))

# mesh adaptivity parameters
Define MAXLEVEL 9
Define MINLEVEL 5

14 13 GfsRiver GfsBox GfsGEdge {
    x = 0.5 y = 0.5 
} {
    # define the inlet disturbance BC
    Global {
        // Parameters
        static double amplitude = 0.20;
        static double distPeriod = 0.933;

        // depth (p) wave-maker
        static double depth_bc(double t) {
            return (NORMALDEPTH*(1.0+amplitude*sin(2.0*M_PI*t/distPeriod)));
        }

        // momentum (U) wave-maker
        static double velocity_bc(double t) {
            return (FROUDE*pow((GRAVITYCOEFF*pow((NORMALDEPTH*(1.0+amplitude*sin(2.0*M_PI*t/distPeriod))),3.0)),0.50));
        }

    }

    Time { end = 32.0 }

    PhysicalParams { L = 3.0 g = 9.81 }

    # We use a sphere knowing that in 2D the resulting object will be
    # a cross-section of the sphere at z = 0 i.e. a cylinder of radius
    # 0.5
    # Solid (cube(40.30,1.50,0.,0.6))
    Solid (sphere(40.30,1.50,0.0,0.3))

    RefineSolid 9

    Init {} {
        # Initial normal flow
	    P = 0.00798
	    U = 0.00828324
    }

    Init { istep = 1 } {
	# Initial normal flow
	# P = 0.00798
	# U = 0.00828324

    # implicit quadratic bottom friction with coefficient based on normal flow
	U = (P > DRY ? (U + GRAVITYCOEFF * CHANNELSLOPE * P * dt)/(1. + dt*0.50*CF*Velocity/P) : 0.)
	V = (P > DRY ? V/(1. + dt*0.50*CF*Velocity/P) : 0.)
    P = (P > DRY ? P : 0.)
    }

    AdvectionParams { 
        gradient = gfs_center_sweby_gradient
        # cfl = 0.5
        }

    # Refine 7
    Refine ((x<2.0) ? 9 : 6)
    # AdaptGradient { istep = 1 } {
    #    cmax = 9.9e-5
    #    cfactor = 2
    #    # cfactor = 4
    #    maxlevel = MAXLEVEL
    #    minlevel = MINLEVEL
    # } P

    AdaptError { istart = 1 istep = 1 } { cmax = 6.30e-5 maxlevel = MAXLEVEL minlevel = MINLEVEL } P
      
      #(P < DRY ? 0. : P + Zb)

    OutputTime { istep = 10 } stderr
    # OutputSimulation { istep = 10 } stdout
    OutputSimulation { step = 1.0 } snapshot-%g.gfs
    OutputSimulation { step = 2.0 } snapshotTecplot-%g.plt {
        format = Tecplot
    }
    OutputSimulation { step = 2.0 } snapshotText-%g.txt {
        format = text
    }
    
    OutputSolidForce { istart = 1 istep = 1 } f
    
    OutputLocation { istep = 1 } gauge1 38.0 1.50 0
    OutputLocation { istep = 1 } gauge2 30.0 1.50 0

    OutputLocation { step = 0.20 } slice-%g gaugeLoc
}
