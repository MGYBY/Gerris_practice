# Title: The square and circular cylinder impacted by the normal flow
#
# Description:
#

# below this depth the flow is considered "dry"
Define DRY 1e-5
Define GRAVITYCOEFF 9.81
Define CHANNELSLOPE 0.05011
Define NORMALDEPTH 0.00798
Define NORMALVELOCITY 1.038
Define CF (2.0*GRAVITYCOEFF*CHANNELSLOPE*NORMALDEPTH/pow(NORMALVELOCITY,2.0))
Define FROUDE (NORMALVELOCITY/pow((GRAVITYCOEFF*NORMALDEPTH),0.50))

# mesh adaptivity parameters
Define MAXLEVEL 9
Define MINLEVEL 3

# triangle solid related geo
Define SLOPE1 1.00/pow(3.0,0.50)
Define SLOPE2 1.00*pow(3.0,0.50)
Define WIDTH 0.60
Define LEFTCOORD 160.0
Define CENTERCOORD 1.50
Define RIGHTCOORD (LEFTCOORD+SLOPE2*WIDTH/2.0)
Define KSLOPE(x1,x2,y1,y2) (y2-y1)/(x2-x1)
Define BINTERCEPT(x1,x2,y1,y2) (x2*y1-x1*y2)/(x2-x1)
# calculation of apex coordinates of the triangle
Define TP1X (LEFTCOORD)
Define TP1Y (CENTERCOORD)
Define TP2X (RIGHTCOORD)
Define TP2Y (CENTERCOORD+0.50*WIDTH)
Define TP3X (RIGHTCOORD)
Define TP3Y (CENTERCOORD-0.50*WIDTH)

Define TMAX 108.5

54 53 GfsRiver GfsBox GfsGEdge {
    x = 0.5 y = 0.5
} {
    # define the inlet disturbance BC
    Global {
        // Parameters
        static double amplitude = 0.20;
        static double distPeriod = 0.933;

        // depth (p) wave-maker
        static double depth_bc(double t) {
            if (t<distPeriod/2.0) return (NORMALDEPTH*(1.0+amplitude*sin(2.0*M_PI*t/distPeriod)));
            else return (NORMALDEPTH);
        }

        // momentum (U) wave-maker
        static double velocity_bc(double t) {
            if (t<distPeriod/2.0) return (FROUDE*pow((GRAVITYCOEFF*pow((NORMALDEPTH*(1.0+amplitude*sin(2.0*M_PI*t/distPeriod))),3.0)),0.50));
            else return (NORMALVELOCITY*NORMALDEPTH);
        }

    }

    Time { end = TMAX }

    PhysicalParams { L = 3.0 g = 9.81 }

    # We use a sphere knowing that in 2D the resulting object will be
    # a cross-section of the sphere at z = 0 i.e. a cylinder of radius
    # 0.5
    Solid ({
        double k1 = KSLOPE(TP1X,TP2X,TP1Y,TP2Y);
        double k2 = KSLOPE(TP1X,TP3X,TP1Y,TP3Y);
        double b1 = BINTERCEPT(TP1X,TP2X,TP1Y,TP2Y);
        double b2 = BINTERCEPT(TP1X,TP3X,TP1Y,TP3Y);
        double line1 = - (k1*x - y + b1);
	    double line2 = (k2*x - y + b2);
        double line3 = x - RIGHTCOORD;
        return intersection (intersection (line1, line2), line3);
    })

    RefineSolid MAXLEVEL

    Init {} {
        # Initial normal flow
	    P = NORMALDEPTH
	    U = NORMALDEPTH*NORMALVELOCITY
        V = 0.0

        OBSREF = pow((x-(160.30)),2.0)+pow((y-(1.50)),2.0)<pow(0.30*1.50,2.0) ? 1.0 : 0.0

        INLETREF = x<0.80 ? 1.0 :0.0

	    # PPrev = P
        # UMed = U
        # VMed = V
    }

    Init { istep = 1 } {
	# TVD RK3
    # follow the integration procedure suggested by E.F.Toro
    # first stage
	UMed = (P > DRY ? U + dt * (GRAVITYCOEFF * CHANNELSLOPE * P - 0.50*CF*Velocity*U/P) : 0.)
	VMed = (P > DRY ? V + dt * (- 0.50*CF*Velocity*V/P) : 0.)

	# second stage
	UMed = (P > DRY ? (3.0/4.0)*U + (1.0/4.0)*UMed + (1.0/4.0)*dt*(GRAVITYCOEFF * CHANNELSLOPE * P - 0.50*CF*pow((pow(UMed,2.0)+pow(VMed,2.0)),0.50)*UMed/pow(P,2.0)) : 0.)
	VMed = (P > DRY ? (3.0/4.0)*V + (1.0/4.0)*VMed + (1.0/4.0)*dt*(-0.50*CF*pow((pow(UMed,2.0)+pow(VMed,2.0)),0.50)*VMed/pow(P,2.0)) :0.)

	# third stage
	U = (P > DRY ? (1.0/3.0)*U+(2.0/3.0)*UMed+(2.0/3.0)*dt*(GRAVITYCOEFF * CHANNELSLOPE * P - 0.50*CF*pow((pow(UMed,2.0)+pow(VMed,2.0)),0.50)*UMed/pow(P,2.0)) : 0.)
    V = (P > DRY ? (1.0/3.0)*V+(2.0/3.0)*VMed+(2.0/3.0)*dt*(-0.50*CF*pow((pow(UMed,2.0)+pow(VMed,2.0)),0.50)*VMed/pow(P,2.0)) : 0.)

    # PPrev = P

    # implicit quadratic bottom friction with coefficient based on normal flow
# 	U = (P > DRY ? (U + GRAVITYCOEFF * CHANNELSLOPE * P * dt)/(1. + dt*0.50*CF*Velocity/P) : 0.)
# 	V = (P > DRY ? V/(1. + dt*0.50*CF*Velocity/P) : 0.)
#     P = (P > DRY ? P : 0.)
    }

    AdvectionParams {
        # gradient = gfs_gm_yu_gradient
        gradient = gfs_center_sweby_gradient
        cfl = 0.185
        }

    AdaptFunction { istep = 1 } {
	cmax = 0
	maxlevel = MAXLEVEL
    } OBSREF

    AdaptFunction { istep = 1 end = 0.80 } {
	cmax = 0
	maxlevel = MAXLEVEL
    } INLETREF

    # Refine 4
    Refine ((x<1.0 || (x>195.6 && 160.4)) ? MAXLEVEL : MINLEVEL)
    AdaptGradient { istart = 1 istep = 1} {
       cmax = 0.500e-3
       cfactor = 2
       # cfactor = 4
       maxlevel = MAXLEVEL
       minlevel = MINLEVEL
    } P

    # AdaptError { istart = 1 istep = 1 end = 12.0 } { cmax = 3.0e-5 maxlevel = MAXLEVEL minlevel = MINLEVEL } P
    AdaptError { istart = 1 istep = 1 } { cmax = 6.00e-5 maxlevel = MAXLEVEL minlevel = MINLEVEL } P

      #(P < DRY ? 0. : P + Zb)

    OutputTime { istep = 10 } stderr
    # OutputSimulation { istep = 10 } stdout
    OutputSimulation { step = 2 } snapshot-%g.gfs { format = gfs variables = P,U,V,OBSREF,INLETREF }
#     OutputSimulation { start = 87.9 step = 0.005 end = 93.50 } snapshotRO-%g.gfs { format = gfs variables = P,U,V,OBSREF }

    EventList { start = 86 istep = 1 end = 105.0 } {
    # "gauge" method for finding max run-up
        OutputLocation {} obliqueSlice-%g RGaugeLoc

        EventScript {} {
            file1="$(ls  obliqueSlice-* | sort -V | tail -n1)"
            awk 'BEGIN{a=0}
                {
                # in a typical location output file, $5 is P field
                if ($1!="#" && $5>0+a)
                    a=$5
                if (NR==2)
                    time=$1
                }
                END{ print time,a }' < "$file1" >> record
            rm obliqueSlice-*
        }
    }

    OutputSolidForce { istart = 1 istep = 1 } f

#     OutputLocation { step = 2.00 } slice-%g gaugeLoc

} {
    dry = DRY
    scheme = kinetic
}
