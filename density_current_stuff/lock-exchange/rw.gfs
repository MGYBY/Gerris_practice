# Title: 2D VOF laminar sheet flow roll wave simulation
#
# Description:
# Normal flow: H = 0.0018636m; U = 0.170357m/s; So=0.040.

# Domain extent

Define LDOMAIN 1.00
Define NUMBOX 3
Define NUMSEG 2
Define LBOX (LDOMAIN/NUMBOX)

# Normal Flow
Define LINIT (LDOMAIN/2.0)
Define GRAVITYCOEFF 9.81
Define CHANNELSIN 0.0
Define CHANNELCOS (pow(1.0-CHANNELSIN*CHANNELSIN, 0.50))

Define POWERLAWN 1.00

# Maximum refinement: guarantee more than 24 cell through normal depth
Define MAXLEVEL 8
# Define MINLEVEL 2
Define MINLEVEL 1

# max run-time
Define TMAX 3.0

# mesh adaptivity parameters
Define UEMAX 0.01

# Bingham rheology model
Define MUREF 0.001
Define MUDRHO 1100.0

# Define AIRRHO 1.12
# Define AIRVIS (MUREF/50.0)
Define AIRRHO 1000
Define AIRVIS (MUREF)

#surface tension coefficient
Define WEBER 0.0
Define STSIGMA (MUDRHO*pow(NORMALVEL,2.0)*NORMALDEPTH/WEBER)

Define HDIST(x) (NORMALDEPTH*(1.0+DISTAmp*sin(2.0*M_PI*(x+LBOX/2.0)/LDOMAIN)))

NUMBOX NUMSEG GfsSimulation GfsBox GfsGEdge {
    # shift origin of the domain
    x = 0.5 y = 0.5
	# y = 0.5
} {
    Global {

	double var (double Tf, double min, double max) {
	// assume filtered by default
    return min + CLAMP(Tf, 0, 1)*(max - min);
	}

	double set_density (double Tf) {
	    return var(Tf, AIRRHO, MUDRHO);
    }

	double MU (double fm, double d2) {
	    double m, mu;
	    double N=POWERLAWN;
	    double mu_max = 60000.0;

	    if (d2 > 0.)
		m = MUREF*exp ((N - 1.)*log (d2));
	    else {
		    if (N < 1.) m = mu_max;
		    else m = N == 1. ? MUREF : 0.;
		}
		mu = MIN (m, mu_max);

		// harmonic mean
		// return 1.0/((1.0-fm)/AIRVIS+fm/mu);
		// algebraic mean
		return AIRVIS + CLAMP(fm, 0, 1)*(mu - AIRVIS);
    }
    }

    PhysicalParams { L = LBOX }

    Time { end = TMAX dtmax = 2e-3 }
    
    # Enhance convergence with Hypre, tuned parameters. More levels are preferred.
#     GModule hypre { verbose = 0 coarsening_type = hmis  nlevel = 13}
    
    AdvectionParams { cfl = 0.45 }

    # We need to tune the solver
    # do not tune solver for now
    # ApproxProjectionParams { tolerance = 1e-4 nitermax = 175 nitermin = 6}
    # ProjectionParams { tolerance = 1e-4  nitermax = 175 nitermin = 6}

    # VOF tracer and interface positions
    VariableTracerVOF T
    # a more consistent VOF method
#     VariableTracerVOFHeight T

#     VariablePosition X T x
#     VariablePosition Y T y

    # note that the filter would greatly improve convergence for large density and viscosity ratio
    # Basilisk code use 2 times filter by default
    # VariableFiltered Tf T 1
    VariableFiltered Tf T 2
    # VariableFiltered Tf T 3
    PhysicalParams { alpha = 1./set_density(Tf) }
    
    # note that if parallelism is used, sufficient partition should be used 
#     Solid (cube(LDOMAIN/2.0, (2.50*(NORMALDEPTH)+0.5*LDOMAIN*2), 0.0, LDOMAIN*2))
#     RefineSolid MAXLEVEL

    # Bingham rheology viscosity
    SourceViscosity {} {
        double muVal = (MU(Tf,D2));
        return muVal;
    }  {
# 	beta = 1
# 	tolerance = 0.2e-5
	beta = 0.5
	# nitermin = 5
	# nitermax = 125
    }

    # BAsed on unfiltered
#     VariableCurvature K T
#     SourceTension T STSIGMA K

    # initial conditions
#     Refine ((y>0.0)&&(y<1.40*NORMALDEPTH) ? MAXLEVEL : MINLEVEL)
    InitFraction T (LINIT-x)
#     InitFraction T (0.0-x)
    Init {} {
        # Initial normal flow
	U = 0.0
    V = 0.0
    P = (LBOX-y)*MUDRHO*GRAVITYCOEFF*T+(LBOX-y)*AIRRHO*GRAVITYCOEFF*(1-T)
    }

    # Track a "band" around the interface to resolve surface gradients
    # properly
    AdaptGradient { istep = 1 } {
	cmax = 0.0
    # cmax = 1e-2
	maxlevel = MAXLEVEL
    minlevel = MINLEVEL
    } T

    # Use constant resolution inside the granular material
    # AdaptFunction { istep = 1 } {
	# cmax = 0
    # cfactor = 2
	# maxlevel = MAXLEVEL
    # # minlevel = MINLEVEL
    # } (T > 0 && T < 1)
    # # (T > 0 && T < 1)
    # # T
    
    # AMR to resolve boundary-layer
#     AdaptFunction { istep = 1 } {
# 	cmax = 0
#     cfactor = 2
# 	maxlevel = (y<(4.0*LBOX/pow(2,MAXLEVEL))) ? MAXLEVEL : (MAXLEVEL-3)
#     # minlevel = MINLEVEL
#     } T

    # AdaptError { istep = 1 } { cmax = 0.01 maxlevel = MAXLEVEL } U
    # AdaptError { istep = 1 } { cmax = 1e-2 maxlevel = max_level } V

    # helpful for wave front resolution
    AdaptVorticity { istep = 1 } { cmax = 0.052 maxlevel = MAXLEVEL minlevel = MINLEVEL}

    # gravity
    Source V (-1.0)*GRAVITYCOEFF*CHANNELCOS
    Source U GRAVITYCOEFF*CHANNELSIN

    OutputTime { istep = 10 } stderr
    OutputProjectionStats { istep = 10 } stderr
    OutputDiffusionStats { istep = 10 } stderr
    OutputTime { istep = 10 } ./time-stats.txt

    # remove ejected droplets (just in case)
    # don't know whether this would help. mass conservation problem?
    # RemoveDroplets { istep = 1 } T -3

    OutputSimulation { step = 0.10 } snapshot-%g.gfs { variables = T,U,V }
    OutputSimulation { step = 0.50 } dump-%g.gfs
    # VTK & Tecplot output does not work for parallelism!
#     OutputSimulation { step = 0.08 } snapshotVTK-%g.vtk { variables = T,U,V format = VTK}
    # OutputSimulation { step = 0.5 } snapshotText-%g.txt {
    #     format = text
    # }

#     OutputLocation { istep = 1 } { awk -f distance.awk > probe1 } gaugeLoc { interpolate = 0 }
    # OutputLocation { step = 0.1 } slice-%g gaugeLoc # { interpolate = 0 }

    GModule gfsview
    OutputView { istep = 60 } {
	ppm2mpeg -s 1200x400 > depth.mpg
    } { width = 1200 height = 400 } view.gfv

    # OutputDropletSums { istep = 1 } drops.txt  { v = T*dV   } T
    
    # energy contents
#     OutputScalarSum { istep = 1 } {
# 	awk '{
#           print $3,$5;
#           fflush (stdout);
#         }' > totalEnergy
#     } { v = T*MUDRHO*((0.5*Velocity2)+(GRAVITYCOEFF*CHANNELCOS*y)) }
#
#     OutputScalarSum { istep = 1 } {
# 	awk '{
#           print $3,$5;
#           fflush (stdout);
#         }' > kineticEnergy
#     } { v = T*MUDRHO*(0.5*Velocity2) }
#
#     OutputScalarSum { istep = 1 } {
# 	awk '{
#           print $3,$5;
#           fflush (stdout);
#         }' > potentialEnergy
#     } { v = T*MUDRHO*(GRAVITYCOEFF*CHANNELCOS*y) }
	
# 	EventBalance { istep = 20 } 0.20
#     OutputBalance { istep = 60 } balance
}

# # box 1
# GfsBox {
#     pid = 0
#     top = Boundary {
# 	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
# 	BcDirichlet P 0.0
# 	BcNeumann V 0
#     }
#     bottom = Boundary {
# 	# no-slip at the bottom
# 	BcDirichlet U 0
#     }
# }
# # box 2
# GfsBox {
#     pid = 0
#     top = Boundary {
# 	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
# 	BcDirichlet P 0.0
# 	BcNeumann V 0
#     }
#     bottom = Boundary {
# 	# no-slip at the bottom
# 	BcDirichlet U 0
#     }
# }

# box 1
GfsBox {
    pid = 0
    left = Boundary
    top = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 2
GfsBox {
    pid = 0
    top = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
# box 3
GfsBox {
    pid = 0
    top = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
    right = Boundary
}

1 2 right
2 3 right
