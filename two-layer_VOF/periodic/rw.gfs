# Title: 2D VOF laminar sheet flow roll wave simulation
#
# Description:
# Normal flow: H = 0.0018636m; U = 0.170357m/s; So=0.040.

# Domain extent
# normal depth and velocity for layer 1 (assigned as Phase 1 in this case: T1=1 && T2=1)
Define HN1 1.0
Define UN1 1.0
Define tanTheta 0.06
Define cosTheta (pow(1.0/(tanTheta*tanTheta+1.0), 0.50))
Define sinTheta (pow((1.0-pow(cosTheta,2.0)),0.50))
Define LDOMAIN (4.50*HN1/tanTheta)
Define NUMBOX 1
Define LBOX (LDOMAIN/NUMBOX)

# parameters for two-layer system
Define hR 1.0
Define muR 1.0
Define rhoR 1.0
Define FR1 2.0
Define Re1 (FR1*FR1/tanTheta/((2.0+3.0*hR*rhoR)/6.0))
Define rhoMud 1.0
Define muMud (1.0/Re1)

# air-fluid ratios
Define rhoRAF 89.50
Define muRAF 48.50
# properties of layer 2 (T1=1 && T2=0)
Define rhoWater (rhoMud*rhoR)
Define muWater (muMud*muR)
# properties of air (T1=0)
Define rhoAir (rhoWater/rhoRAF)
Define muAir (muWater/muRAF)

# Weber number defined based on air-fluid interface
# TODO: need to be defined based on layer 2
Define WE 150.0
Define TENSION (muWater*pow(UN1,2.0)*HN1/WE)

# disturbance parameters for the two layers
Define AMPI 0.125
Define AMPII 0.125
Define AMPVEL 0.00

# Maximum refinement: guarantee more than 24 cell through normal depth
Define MAXLEVEL 12
# Define MINLEVEL 2
Define MINLEVEL 1

# max run-time
Define TMAX 300.0
Define TOUTPUT 1.0
Define TSNAP 5.0
Define TFINAL 300.0

# mesh adaptivity parameters
Define UEMAX 0.0499
Define VOREMAX 0.075
Define TOPEXTENT (HN1*(1.0+hR)*3.20)

Define HDIST(x,base,amp,wl) (base*(1.0+amp*sin(2.0*M_PI*(x+LBOX/2.0)/wl)))

NUMBOX NUMBOX GfsSimulation GfsBox GfsGEdge {
    # shift origin of the domain
    x = 0.5 y = 0.5
	# y = 0.5
} {
    Global {
    // velocity distribution of steady-uniform flow
    double velDist (double xCoord, double yCoord) {
        double term, h1, h2;
        term = 2.0+3.0*hR*rhoR;
        h1 = HDIST(xCoord, HN1, AMPI, LDOMAIN);
        h2 = HDIST(xCoord, HN1*hR, AMPI, LDOMAIN)+HDIST(xCoord, (HN1*hR), AMPII, LDOMAIN);
        if (yCoord<=h1) {
            // layer 1
            return ((3.0*yCoord*(2.0+2.0*hR*rhoR))/term-3.0*(yCoord*yCoord)/term);
        }
        else if (yCoord>h1 && yCoord<=h2) {
            // layer 2
            return ((3.0*muR-3.0*rhoR-6.0*hR*rhoR+6.0*hR*muR*rhoR)/(term*muR)+yCoord*(6.0*rhoR+6.0*hR*rhoR)/(term*muR)-3.0*(yCoord*yCoord)*(rhoR/(term*muR)));
        }
        // air
        else return 1.055*((3.0*muR-3.0*rhoR-6.0*hR*rhoR+6.0*hR*muR*rhoR)/(term*muR)+yCoord*(6.0*rhoR+6.0*hR*rhoR)/(term*muR)-3.0*(yCoord*yCoord)*(rhoR/(term*muR)));
    }

    double hydroPressureDist(double xCoord, double yCoord) {
        double gRed;
        double term, h1, h2;
        gRed = 1.0/(FR1*FR1);
        h1 = HDIST(xCoord, HN1, AMPI, LDOMAIN);
        h2 = HDIST(xCoord, HN1*hR, AMPI, LDOMAIN)+HDIST(xCoord, (HN1*hR), AMPII, LDOMAIN);
        if (yCoord<=h1)
            return (rhoMud*gRed*(h1-yCoord)+rhoWater*gRed*(h2-h1));
        else if(yCoord>h1 && yCoord<=h2)
            return (rhoWater*gRed*(h2-yCoord));
        else
            return (0.0-rhoAir*gRed*(yCoord-h2));
    }

	double var (double Tf1, double Tf2, double var1, double var2, double var3) {
	// assume filtered by default
    return (CLAMP(Tf1*Tf2, 0., 1.) * var1 + CLAMP(Tf1*(1.0-Tf2), 0., 1.) * var2 + CLAMP((1-Tf1), 0., 1.) * var3);
	}

	double set_density (double Tf1, double Tf2) {
	    return var(Tf1, Tf2, rhoMud, rhoWater, rhoAir);
    }

    double set_vis (double Tf1, double Tf2) {
        return var(Tf1, Tf2, muMud, muWater, muAir);
    }
    }

    PhysicalParams { L = LBOX }

    Time { end = TFINAL dtmax = 1e-2 }
    
    # Enhance convergence with Hypre, tuned parameters. More levels are preferred.
#     GModule hypre { verbose = 0 coarsening_type = hmis  nlevel = 13}
    
    AdvectionParams { cfl = 0.475 }

    # We need to tune the solver
    # do not tune solver for now
    ApproxProjectionParams { tolerance = 2.5e-4 nitermax = 200 nitermin = 1}
    ProjectionParams { tolerance = 2.5e-4  nitermax = 200 nitermin = 1}

    # VOF tracer and interface positions
    # VariableTracerVOF T
    # a more consistent VOF method
#     VariableTracerVOFHeight T1
#     VariableTracerVOFHeight T2
    VariableTracerVOF T1
    VariableTracerVOF T2
    
    # passive scalar transport
#     VariableTracerVOF Ti
#     InitFraction Ti ({
# 	    double top = TRACERTOPYCOORD - y;
# 	    double bottom = y - TRACERBOTTOMYCOORD;
# 	    return union (top, bottom);
#     })

#     VariablePosition X T1 x1
#     VariablePosition Y T1 y1
#     VariablePosition X T2 x2
#     VariablePosition Y T2 y2

    # note that the filter would greatly improve convergence for large density and viscosity ratio
    # Basilisk code use 2 times filter by default
    # VariableFiltered Tf T 1
#     VariableFiltered Tf1 T1 1
    # VariableFiltered Tf2 T2 1
    # VariableFiltered Tf T 3
    # PhysicalParams { alpha = 1./set_density(Tf1, Tf2) }
    PhysicalParams { alpha = 1./set_density(T1, T2) }
    # SourceViscosity set_vis (Tf1, Tf2)
    SourceViscosity set_vis (T1, T2)
    
    # note that if parallelism is used, sufficient partition should be used 
#     Solid (cube(LDOMAIN/2.0, (2.50*(NORMALDEPTH)+0.5*LDOMAIN*2), 0.0, LDOMAIN*2))
#     RefineSolid MAXLEVEL
#
#     # more control on the top BC
#     SurfaceBc P Dirichlet (-1.0*AIRRHO*CHANNELCOS*GRAVITYCOEFF*(2.36-1.0)*NORMALDEPTH)
#     SurfaceBc U Neumann 0.0
#     SurfaceBc V Neumann 0.0
#     SurfaceBc T Neumann 0.0
#     SurfaceBc Ti Neumann 0.0

    # BAsed on unfiltered
    VariableCurvature K1 T1
    VariableCurvature K2 T2
    SourceTension T1 TENSION K1
    SourceTension T2 TENSION K2

    # initial conditions
    Refine ((y>0.0)&&(y<1.40*HN1*(1.0+hR)) ? MAXLEVEL : (MAXLEVEL-5))
    InitFraction T1 ((HDIST(x,HN1,AMPI,LDOMAIN)+HDIST(x,HN1*hR,AMPII,LDOMAIN))-y)
    InitFraction T2 (HDIST(x,HN1,AMPI,LDOMAIN)-y)

    Init {} {
        # Initial normal flow
	U = velDist (x, y)*(1.0+AMPVEL*sin(2.0*M_PI*(x+LBOX/2.0)/LDOMAIN))
    V = 0.0
    P = hydroPressureDist(x,y)
    }

    # Track a "band" around the interface to resolve surface gradients
    # properly
    AdaptGradient { istep = 1 } {
	cmax = 0.0
    # cmax = 1e-2
	maxlevel = MAXLEVEL
    minlevel = MINLEVEL
    } T1
    AdaptGradient { istep = 1 } {
	cmax = 0.0
    # cmax = 1e-2
	maxlevel = MAXLEVEL
    minlevel = MINLEVEL
    } T2

    # Use constant resolution inside the granular material
    # AdaptFunction { istep = 1 } {
	# cmax = 0
    # cfactor = 2
	# maxlevel = MAXLEVEL
    # # minlevel = MINLEVEL
    # } (T > 0 && T < 1)
    # # (T > 0 && T < 1)
    # # T
    
    # AMR to resolve boundary-layer
    AdaptFunction { istep = 1 } {
	cmax = 0
    cfactor = 2
	maxlevel = (y<(5.520*LBOX/pow(2,MAXLEVEL))) ? MAXLEVEL : (MAXLEVEL-3)
    # minlevel = MINLEVEL
    } T1

    AdaptFunction { istep = 1 } {
	cmax = VOREMAX
    cfactor = 2
	maxlevel = (y<TOPEXTENT) ? MAXLEVEL : (MINLEVEL+1)
    # minlevel = MINLEVEL
    } (T1*Vorticity)

    AdaptFunction { istep = 1 } {
	cmax = (VOREMAX*8.50)
    cfactor = 2
	maxlevel = (y<TOPEXTENT) ? MAXLEVEL : (MINLEVEL+1)
    # minlevel = MINLEVEL
    } ((1.0-T1)*Vorticity)

    # AdaptError { istep = 1 } { cmax = 0.01 maxlevel = MAXLEVEL } U
    # AdaptError { istep = 1 } { cmax = 1e-2 maxlevel = max_level } V

    # helpful for wave front resolution
    # TODO: vort adapt based on fluid phase
#     AdaptVorticity { istep = 1 } { cmax = VOREMAX maxlevel = (y<(TOPEXTENT*0.98) ? MAXLEVEL : (MINLEVEL+1)) minlevel = MINLEVEL}

    # gravity
    Source V (-1.0)*(1.0/(FR1*FR1))
#     Source U (1.0/(FR1*FR1))*sinTheta*Tf1
    Source U (1.0/(FR1*FR1))*tanTheta*T1

    OutputTime { istep = 10 } stderr
    OutputProjectionStats { istep = 10 } stderr
    OutputDiffusionStats { istep = 10 } stderr
    OutputTime { istep = 10 } ./time-stats.txt

    # remove ejected droplets (just in case)
    # don't know whether this would help. mass conservation problem?
    # RemoveDroplets { istep = 1 } T -3

    OutputSimulation { step = 1.0 } snapshot-%g.gfs { variables = T1,T2,U,V }
    OutputSimulation { step = 5.0 } dump-%g.gfs

    # probes
#     OutputLocation { istep = 1 } { awk -f distance.awk > probe1 } gaugeLoc { interpolate = 0 }
    # OutputLocation { step = 0.1 } slice-%g gaugeLoc # { interpolate = 0 }

    GModule gfsview
    OutputView { istep = 72 } {
	ppm2mpeg -s 1120x420 > depth.mpg
    } { width = 1600 height = 600 } view1.gfv

    # OutputDropletSums { istep = 1 } drops.txt  { v = T*dV   } T
    
    # energy contents
#     OutputScalarSum { istep = 1 } {
# 	awk '{
#           print $3,$5;
#           fflush (stdout);
#         }' > totalEnergy
#     } { v = T*MUDRHO*((0.5*Velocity2)+(GRAVITYCOEFF*CHANNELCOS*y)) }
#
#     OutputScalarSum { istep = 1 } {
# 	awk '{
#           print $3,$5;
#           fflush (stdout);
#         }' > kineticEnergy
#     } { v = T*MUDRHO*(0.5*Velocity2) }
#
#     OutputScalarSum { istep = 1 } {
# 	awk '{
#           print $3,$5;
#           fflush (stdout);
#         }' > potentialEnergy
#     } { v = T*MUDRHO*(GRAVITYCOEFF*CHANNELCOS*y) }
	
	EventBalance { istep = 20 } 0.20
    OutputBalance { istep = 60 } balance
}
GfsBox {
    top = Boundary {
	# BcDirichlet P -AIRRHO*GRAVITYCOEFF*CHANNELCOS*LBOX
	BcDirichlet P 0.0
	BcNeumann V 0
    }
    bottom = Boundary {
	# no-slip at the bottom
	BcDirichlet U 0
    }
}
1 1 right
